{"version":3,"file":"esm-BXkBHttS.js","names":["updateColorValue","checkDestroy","Attractor","container","Attractor","container","bounce","container","lineStyle","container","container","container","container","container","container"],"sources":["../../tsparticles-engine/esm/Core/Utils/ExternalInteractorBase.js","../../tsparticles-engine/esm/Core/Utils/ParticlesInteractorBase.js","../../tsparticles-particles.js/esm/marcbruederlin/Particles.js","../../tsparticles-particles.js/esm/VincentGarreau/particles.js","../../tsparticles-particles.js/esm/index.js","../../tsparticles-move-base/esm/Utils.js","../../tsparticles-move-base/esm/BaseMover.js","../../tsparticles-move-base/esm/index.js","../../tsparticles-shape-circle/esm/CircleDrawer.js","../../tsparticles-shape-circle/esm/index.js","../../tsparticles-updater-color/esm/Utils.js","../../tsparticles-updater-color/esm/ColorUpdater.js","../../tsparticles-updater-color/esm/index.js","../../tsparticles-updater-opacity/esm/Utils.js","../../tsparticles-updater-opacity/esm/OpacityUpdater.js","../../tsparticles-updater-opacity/esm/index.js","../../tsparticles-updater-out-modes/esm/Utils.js","../../tsparticles-updater-out-modes/esm/BounceOutMode.js","../../tsparticles-updater-out-modes/esm/DestroyOutMode.js","../../tsparticles-updater-out-modes/esm/NoneOutMode.js","../../tsparticles-updater-out-modes/esm/OutOutMode.js","../../tsparticles-updater-out-modes/esm/OutOfCanvasUpdater.js","../../tsparticles-updater-out-modes/esm/index.js","../../tsparticles-updater-size/esm/Utils.js","../../tsparticles-updater-size/esm/SizeUpdater.js","../../tsparticles-updater-size/esm/index.js","../../tsparticles-basic/esm/index.js","../../tsparticles-plugin-easing-quad/esm/index.js","../../tsparticles-interaction-external-attract/esm/Options/Classes/Attract.js","../../tsparticles-interaction-external-attract/esm/Attractor.js","../../tsparticles-interaction-external-attract/esm/index.js","../../tsparticles-interaction-external-bounce/esm/Options/Classes/Bounce.js","../../tsparticles-interaction-external-bounce/esm/Bouncer.js","../../tsparticles-interaction-external-bounce/esm/index.js","../../tsparticles-interaction-external-bubble/esm/Options/Classes/BubbleBase.js","../../tsparticles-interaction-external-bubble/esm/Options/Classes/BubbleDiv.js","../../tsparticles-interaction-external-bubble/esm/Options/Classes/Bubble.js","../../tsparticles-interaction-external-bubble/esm/Utils.js","../../tsparticles-interaction-external-bubble/esm/Bubbler.js","../../tsparticles-interaction-external-bubble/esm/index.js","../../tsparticles-interaction-external-connect/esm/Options/Classes/ConnectLinks.js","../../tsparticles-interaction-external-connect/esm/Options/Classes/Connect.js","../../tsparticles-interaction-external-connect/esm/Utils.js","../../tsparticles-interaction-external-connect/esm/Connector.js","../../tsparticles-interaction-external-connect/esm/index.js","../../tsparticles-interaction-external-grab/esm/Options/Classes/GrabLinks.js","../../tsparticles-interaction-external-grab/esm/Options/Classes/Grab.js","../../tsparticles-interaction-external-grab/esm/Utils.js","../../tsparticles-interaction-external-grab/esm/Grabber.js","../../tsparticles-interaction-external-grab/esm/index.js","../../tsparticles-interaction-external-pause/esm/Pauser.js","../../tsparticles-interaction-external-pause/esm/index.js","../../tsparticles-interaction-external-push/esm/Options/Classes/Push.js","../../tsparticles-interaction-external-push/esm/Pusher.js","../../tsparticles-interaction-external-push/esm/index.js","../../tsparticles-interaction-external-remove/esm/Options/Classes/Remove.js","../../tsparticles-interaction-external-remove/esm/Remover.js","../../tsparticles-interaction-external-remove/esm/index.js","../../tsparticles-interaction-external-repulse/esm/Options/Classes/RepulseBase.js","../../tsparticles-interaction-external-repulse/esm/Options/Classes/RepulseDiv.js","../../tsparticles-interaction-external-repulse/esm/Options/Classes/Repulse.js","../../tsparticles-interaction-external-repulse/esm/Repulser.js","../../tsparticles-interaction-external-repulse/esm/index.js","../../tsparticles-interaction-external-slow/esm/Options/Classes/Slow.js","../../tsparticles-interaction-external-slow/esm/Slower.js","../../tsparticles-interaction-external-slow/esm/index.js","../../tsparticles-shape-image/esm/GifUtils/Constants.js","../../tsparticles-shape-image/esm/GifUtils/ByteStream.js","../../tsparticles-shape-image/esm/GifUtils/Utils.js","../../tsparticles-shape-image/esm/Utils.js","../../tsparticles-shape-image/esm/ImageDrawer.js","../../tsparticles-shape-image/esm/Options/Classes/Preload.js","../../tsparticles-shape-image/esm/ImagePreloader.js","../../tsparticles-shape-image/esm/index.js","../../tsparticles-updater-life/esm/Options/Classes/LifeDelay.js","../../tsparticles-updater-life/esm/Options/Classes/LifeDuration.js","../../tsparticles-updater-life/esm/Options/Classes/Life.js","../../tsparticles-updater-life/esm/LifeUpdater.js","../../tsparticles-updater-life/esm/index.js","../../tsparticles-shape-line/esm/LineDrawer.js","../../tsparticles-shape-line/esm/index.js","../../tsparticles-move-parallax/esm/ParallaxMover.js","../../tsparticles-move-parallax/esm/index.js","../../tsparticles-interaction-particles-attract/esm/Attractor.js","../../tsparticles-interaction-particles-attract/esm/index.js","../../tsparticles-interaction-particles-collisions/esm/Absorb.js","../../tsparticles-interaction-particles-collisions/esm/Bounce.js","../../tsparticles-interaction-particles-collisions/esm/Destroy.js","../../tsparticles-interaction-particles-collisions/esm/ResolveCollision.js","../../tsparticles-interaction-particles-collisions/esm/Collider.js","../../tsparticles-interaction-particles-collisions/esm/index.js","../../tsparticles-interaction-particles-links/esm/CircleWarp.js","../../tsparticles-interaction-particles-links/esm/Options/Classes/LinksShadow.js","../../tsparticles-interaction-particles-links/esm/Options/Classes/LinksTriangle.js","../../tsparticles-interaction-particles-links/esm/Options/Classes/Links.js","../../tsparticles-interaction-particles-links/esm/Linker.js","../../tsparticles-interaction-particles-links/esm/interaction.js","../../tsparticles-interaction-particles-links/esm/Utils.js","../../tsparticles-interaction-particles-links/esm/LinkInstance.js","../../tsparticles-interaction-particles-links/esm/plugin.js","../../tsparticles-interaction-particles-links/esm/index.js","../../tsparticles-shape-polygon/esm/PolygonDrawerBase.js","../../tsparticles-shape-polygon/esm/PolygonDrawer.js","../../tsparticles-shape-polygon/esm/TriangleDrawer.js","../../tsparticles-shape-polygon/esm/index.js","../../tsparticles-updater-rotate/esm/Options/Classes/RotateAnimation.js","../../tsparticles-updater-rotate/esm/Options/Classes/Rotate.js","../../tsparticles-updater-rotate/esm/RotateUpdater.js","../../tsparticles-updater-rotate/esm/index.js","../../tsparticles-shape-square/esm/SquareDrawer.js","../../tsparticles-shape-square/esm/index.js","../../tsparticles-shape-star/esm/StarDrawer.js","../../tsparticles-shape-star/esm/index.js","../../tsparticles-updater-stroke-color/esm/Utils.js","../../tsparticles-updater-stroke-color/esm/StrokeColorUpdater.js","../../tsparticles-updater-stroke-color/esm/index.js","../../tsparticles-shape-text/esm/TextDrawer.js","../../tsparticles-shape-text/esm/index.js","../../tsparticles-slim/esm/index.js"],"sourcesContent":["export class ExternalInteractorBase {\n    constructor(container) {\n        this.container = container;\n        this.type = \"external\";\n    }\n}\n","export class ParticlesInteractorBase {\n    constructor(container) {\n        this.container = container;\n        this.type = \"particles\";\n    }\n}\n","import { tsParticles } from \"tsparticles-engine\";\nexport class Particles {\n    static init(options) {\n        const particles = new Particles(), selector = options.selector;\n        if (!selector) {\n            throw new Error(\"No selector provided\");\n        }\n        const el = document.querySelector(selector);\n        if (!el) {\n            throw new Error(\"No element found for selector\");\n        }\n        tsParticles\n            .set(selector.replace(\".\", \"\").replace(\"!\", \"\"), el, {\n            fullScreen: {\n                enable: false,\n            },\n            particles: {\n                color: {\n                    value: options.color ?? \"!000000\",\n                },\n                links: {\n                    color: \"random\",\n                    distance: options.minDistance ?? 120,\n                    enable: options.connectParticles ?? false,\n                },\n                move: {\n                    enable: true,\n                    speed: options.speed ?? 0.5,\n                },\n                number: {\n                    value: options.maxParticles ?? 100,\n                },\n                size: {\n                    value: { min: 1, max: options.sizeVariations ?? 3 },\n                },\n            },\n            responsive: options.responsive?.map((responsive) => ({\n                maxWidth: responsive.breakpoint,\n                options: {\n                    particles: {\n                        color: {\n                            value: responsive.options?.color,\n                        },\n                        links: {\n                            distance: responsive.options?.minDistance,\n                            enable: responsive.options?.connectParticles,\n                        },\n                        number: {\n                            value: options.maxParticles,\n                        },\n                        move: {\n                            enable: true,\n                            speed: responsive.options?.speed,\n                        },\n                        size: {\n                            value: responsive.options?.sizeVariations,\n                        },\n                    },\n                },\n            })),\n        })\n            .then((container) => {\n            particles._container = container;\n        });\n        return particles;\n    }\n    destroy() {\n        const container = this._container;\n        container && container.destroy();\n    }\n    pauseAnimation() {\n        const container = this._container;\n        container && container.pause();\n    }\n    resumeAnimation() {\n        const container = this._container;\n        container && container.play();\n    }\n}\n","const initParticlesJS = (engine) => {\n    const particlesJS = (tagId, options) => {\n        return engine.load(tagId, options);\n    };\n    particlesJS.load = (tagId, pathConfigJson, callback) => {\n        engine\n            .loadJSON(tagId, pathConfigJson)\n            .then((container) => {\n            if (container) {\n                callback(container);\n            }\n        })\n            .catch(() => {\n            callback(undefined);\n        });\n    };\n    particlesJS.setOnClickHandler = (callback) => {\n        engine.setOnClickHandler(callback);\n    };\n    const pJSDom = engine.dom();\n    return { particlesJS, pJSDom };\n};\nexport { initParticlesJS };\n","import { Particles } from \"./marcbruederlin/Particles\";\nimport { initParticlesJS } from \"./VincentGarreau/particles\";\nconst initPjs = (engine) => {\n    const { particlesJS, pJSDom } = initParticlesJS(engine);\n    window.particlesJS = particlesJS;\n    window.pJSDom = pJSDom;\n    window.Particles = Particles;\n    return { particlesJS, pJSDom, Particles };\n};\nexport { initPjs };\n","import { clamp, getDistances, getRandom, } from \"tsparticles-engine\";\nexport function applyDistance(particle) {\n    const initialPosition = particle.initialPosition, { dx, dy } = getDistances(initialPosition, particle.position), dxFixed = Math.abs(dx), dyFixed = Math.abs(dy), { maxDistance } = particle.retina, hDistance = maxDistance.horizontal, vDistance = maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\n            vel.x *= -getRandom();\n        }\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\n            vel.y *= -getRandom();\n        }\n    }\n}\nexport function move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta) {\n    applyPath(particle, delta);\n    const gravityOptions = particle.gravity, gravityFactor = gravityOptions?.enable && gravityOptions.inverse ? -1 : 1;\n    if (moveDrift && moveSpeed) {\n        particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n    }\n    if (gravityOptions?.enable && moveSpeed) {\n        particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n    }\n    const decay = particle.moveDecay;\n    particle.velocity.multTo(decay);\n    const velocity = particle.velocity.mult(moveSpeed);\n    if (gravityOptions?.enable &&\n        maxSpeed > 0 &&\n        ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n            (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n        velocity.y = gravityFactor * maxSpeed;\n        if (moveSpeed) {\n            particle.velocity.y = velocity.y / moveSpeed;\n        }\n    }\n    const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n    velocity.multTo(zVelocityFactor);\n    const { position } = particle;\n    position.addTo(velocity);\n    if (moveOptions.vibrate) {\n        position.x += Math.sin(position.x * Math.cos(position.y));\n        position.y += Math.cos(position.y * Math.sin(position.x));\n    }\n}\nexport function spin(particle, moveSpeed) {\n    const container = particle.container;\n    if (!particle.spin) {\n        return;\n    }\n    const updateFunc = {\n        x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n        y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos,\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n    if (particle.spin.radius > maxCanvasSize / 2) {\n        particle.spin.radius = maxCanvasSize / 2;\n        particle.spin.acceleration *= -1;\n    }\n    else if (particle.spin.radius < 0) {\n        particle.spin.radius = 0;\n        particle.spin.acceleration *= -1;\n    }\n    particle.spin.angle += (moveSpeed / 100) * (1 - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n    const particlesOptions = particle.options, pathOptions = particlesOptions.move.path, pathEnabled = pathOptions.enable;\n    if (!pathEnabled) {\n        return;\n    }\n    if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n    }\n    const path = particle.pathGenerator?.generate(particle, delta);\n    if (path) {\n        particle.velocity.addTo(path);\n    }\n    if (pathOptions.clamp) {\n        particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n        particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n    }\n    particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n    return particle.slow.inRange ? particle.slow.factor : 1;\n}\n","import { getDistance, getRangeMax, getRangeValue, } from \"tsparticles-engine\";\nimport { applyDistance, getProximitySpeedFactor, move, spin } from \"./Utils\";\nconst diffFactor = 2;\nexport class BaseMover {\n    constructor() {\n        this._initSpin = (particle) => {\n            const container = particle.container, options = particle.options, spinOptions = options.move.spin;\n            if (!spinOptions.enable) {\n                return;\n            }\n            const spinPos = spinOptions.position ?? { x: 50, y: 50 }, spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            }, pos = particle.getPosition(), distance = getDistance(pos, spinCenter), spinAcceleration = getRangeValue(spinOptions.acceleration);\n            particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n            particle.spin = {\n                center: spinCenter,\n                direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n                angle: particle.velocity.angle,\n                radius: distance,\n                acceleration: particle.retina.spinAcceleration,\n            };\n        };\n    }\n    init(particle) {\n        const options = particle.options, gravityOptions = options.move.gravity;\n        particle.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        this._initSpin(particle);\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    move(particle, delta) {\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, pxRatio = container.retina.pixelRatio, slowFactor = getProximitySpeedFactor(particle), baseSpeed = (particle.retina.moveSpeed ??= getRangeValue(moveOptions.speed) * pxRatio) *\n            container.retina.reduceFactor, moveDrift = (particle.retina.moveDrift ??= getRangeValue(particle.options.move.drift) * pxRatio), maxSize = getRangeMax(particleOptions.size.value) * pxRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, moveSpeed = (baseSpeed * sizeFactor * slowFactor * (delta.factor || 1)) / diffFactor, maxSpeed = particle.retina.maxSpeed ?? container.retina.maxSpeed;\n        if (moveOptions.spin.enable) {\n            spin(particle, moveSpeed);\n        }\n        else {\n            move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta);\n        }\n        applyDistance(particle);\n    }\n}\n","import { BaseMover } from \"./BaseMover\";\nexport async function loadBaseMover(engine, refresh = true) {\n    await engine.addMover(\"base\", () => new BaseMover(), refresh);\n}\n","import { isObject } from \"tsparticles-engine\";\nexport class CircleDrawer {\n    draw(context, particle, radius) {\n        if (!particle.circleRange) {\n            particle.circleRange = { min: 0, max: Math.PI * 2 };\n        }\n        const circleRange = particle.circleRange;\n        context.arc(0, 0, radius, circleRange.min, circleRange.max, false);\n    }\n    getSidesCount() {\n        return 12;\n    }\n    particleInit(container, particle) {\n        const shapeData = particle.shapeData, angle = shapeData?.angle ?? {\n            max: 360,\n            min: 0,\n        };\n        particle.circleRange = !isObject(angle)\n            ? {\n                min: 0,\n                max: (angle * Math.PI) / 180,\n            }\n            : { min: (angle.min * Math.PI) / 180, max: (angle.max * Math.PI) / 180 };\n    }\n}\n","import { CircleDrawer } from \"./CircleDrawer\";\nexport async function loadCircleShape(engine, refresh = true) {\n    await engine.addShape(\"circle\", new CircleDrawer(), refresh);\n}\n","import { randomInRange, } from \"tsparticles-engine\";\nfunction updateColorValue(delta, colorValue, valueAnimation, max, decrease) {\n    if (!colorValue ||\n        !valueAnimation.enable ||\n        ((colorValue.maxLoops ?? 0) > 0 && (colorValue.loops ?? 0) > (colorValue.maxLoops ?? 0))) {\n        return;\n    }\n    if (!colorValue.time) {\n        colorValue.time = 0;\n    }\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n        colorValue.time += delta.value;\n    }\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n        return;\n    }\n    const offset = randomInRange(valueAnimation.offset), velocity = (colorValue.velocity ?? 0) * delta.factor + offset * 3.6, decay = colorValue.decay ?? 1;\n    if (!decrease || colorValue.status === \"increasing\") {\n        colorValue.value += velocity;\n        if (colorValue.value > max) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            if (decrease) {\n                colorValue.status = \"decreasing\";\n                colorValue.value -= colorValue.value % max;\n            }\n        }\n    }\n    else {\n        colorValue.value -= velocity;\n        if (colorValue.value < 0) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            colorValue.status = \"increasing\";\n            colorValue.value += colorValue.value;\n        }\n    }\n    if (colorValue.velocity && decay !== 1) {\n        colorValue.velocity *= decay;\n    }\n    if (colorValue.value > max) {\n        colorValue.value %= max;\n    }\n}\nexport function updateColor(particle, delta) {\n    const { h: hAnimation, s: sAnimation, l: lAnimation } = particle.options.color.animation, { color } = particle;\n    if (!color) {\n        return;\n    }\n    const { h, s, l } = color;\n    if (h) {\n        updateColorValue(delta, h, hAnimation, 360, false);\n    }\n    if (s) {\n        updateColorValue(delta, s, sAnimation, 100, true);\n    }\n    if (l) {\n        updateColorValue(delta, l, lAnimation, 100, true);\n    }\n}\n","import { getHslAnimationFromHsl, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { updateColor } from \"./Utils\";\nexport class ColorUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const hslColor = rangeColorToHsl(particle.options.color, particle.id, particle.options.reduceDuplicates);\n        if (hslColor) {\n            particle.color = getHslAnimationFromHsl(hslColor, particle.options.color.animation, this.container.retina.reduceFactor);\n        }\n    }\n    isEnabled(particle) {\n        const { h: hAnimation, s: sAnimation, l: lAnimation } = particle.options.color.animation, { color } = particle;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            ((color?.h.value !== undefined && hAnimation.enable) ||\n                (color?.s.value !== undefined && sAnimation.enable) ||\n                (color?.l.value !== undefined && lAnimation.enable)));\n    }\n    update(particle, delta) {\n        updateColor(particle, delta);\n    }\n}\n","import { ColorUpdater } from \"./ColorUpdater\";\nexport async function loadColorUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"color\", (container) => new ColorUpdater(container), refresh);\n}\n","import { clamp } from \"tsparticles-engine\";\nfunction checkDestroy(particle, value, minValue, maxValue) {\n    switch (particle.options.opacity.animation.destroy) {\n        case \"max\":\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case \"min\":\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nexport function updateOpacity(particle, delta) {\n    const data = particle.opacity;\n    if (particle.destroyed || !data?.enable || ((data.maxLoops ?? 0) > 0 && (data.loops ?? 0) > (data.maxLoops ?? 0))) {\n        return;\n    }\n    const minValue = data.min, maxValue = data.max, decay = data.decay ?? 1;\n    if (!data.time) {\n        data.time = 0;\n    }\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n        data.time += delta.value;\n    }\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n        return;\n    }\n    switch (data.status) {\n        case \"increasing\":\n            if (data.value >= maxValue) {\n                data.status = \"decreasing\";\n                if (!data.loops) {\n                    data.loops = 0;\n                }\n                data.loops++;\n            }\n            else {\n                data.value += (data.velocity ?? 0) * delta.factor;\n            }\n            break;\n        case \"decreasing\":\n            if (data.value <= minValue) {\n                data.status = \"increasing\";\n                if (!data.loops) {\n                    data.loops = 0;\n                }\n                data.loops++;\n            }\n            else {\n                data.value -= (data.velocity ?? 0) * delta.factor;\n            }\n            break;\n    }\n    if (data.velocity && data.decay !== 1) {\n        data.velocity *= decay;\n    }\n    checkDestroy(particle, data.value, minValue, maxValue);\n    if (!particle.destroyed) {\n        data.value = clamp(data.value, minValue, maxValue);\n    }\n}\n","import { getRandom, getRangeValue, initParticleNumericAnimationValue, } from \"tsparticles-engine\";\nimport { updateOpacity } from \"./Utils\";\nexport class OpacityUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const opacityOptions = particle.options.opacity;\n        particle.opacity = initParticleNumericAnimationValue(opacityOptions, 1);\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            particle.opacity.velocity =\n                (getRangeValue(opacityAnimation.speed) / 100) * this.container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                particle.opacity.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!particle.opacity &&\n            particle.opacity.enable &&\n            ((particle.opacity.maxLoops ?? 0) <= 0 ||\n                ((particle.opacity.maxLoops ?? 0) > 0 &&\n                    (particle.opacity.loops ?? 0) < (particle.opacity.maxLoops ?? 0))));\n    }\n    reset(particle) {\n        if (particle.opacity) {\n            particle.opacity.time = 0;\n            particle.opacity.loops = 0;\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateOpacity(particle, delta);\n    }\n}\n","import { OpacityUpdater } from \"./OpacityUpdater\";\nexport async function loadOpacityUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"opacity\", (container) => new OpacityUpdater(container), refresh);\n}\n","import { getValue } from \"tsparticles-engine\";\nexport function bounceHorizontal(data) {\n    if ((data.outMode !== \"bounce\" &&\n        data.outMode !== \"bounce-horizontal\" &&\n        data.outMode !== \"bounceHorizontal\" &&\n        data.outMode !== \"split\") ||\n        (data.direction !== \"left\" && data.direction !== \"right\")) {\n        return;\n    }\n    if (data.bounds.right < 0 && data.direction === \"left\") {\n        data.particle.position.x = data.size + data.offset.x;\n    }\n    else if (data.bounds.left > data.canvasSize.width && data.direction === \"right\") {\n        data.particle.position.x = data.canvasSize.width - data.size - data.offset.x;\n    }\n    const velocity = data.particle.velocity.x;\n    let bounced = false;\n    if ((data.direction === \"right\" && data.bounds.right >= data.canvasSize.width && velocity > 0) ||\n        (data.direction === \"left\" && data.bounds.left <= 0 && velocity < 0)) {\n        const newVelocity = getValue(data.particle.options.bounce.horizontal);\n        data.particle.velocity.x *= -newVelocity;\n        bounced = true;\n    }\n    if (!bounced) {\n        return;\n    }\n    const minPos = data.offset.x + data.size;\n    if (data.bounds.right >= data.canvasSize.width && data.direction === \"right\") {\n        data.particle.position.x = data.canvasSize.width - minPos;\n    }\n    else if (data.bounds.left <= 0 && data.direction === \"left\") {\n        data.particle.position.x = minPos;\n    }\n    if (data.outMode === \"split\") {\n        data.particle.destroy();\n    }\n}\nexport function bounceVertical(data) {\n    if ((data.outMode !== \"bounce\" &&\n        data.outMode !== \"bounce-vertical\" &&\n        data.outMode !== \"bounceVertical\" &&\n        data.outMode !== \"split\") ||\n        (data.direction !== \"bottom\" && data.direction !== \"top\")) {\n        return;\n    }\n    if (data.bounds.bottom < 0 && data.direction === \"top\") {\n        data.particle.position.y = data.size + data.offset.y;\n    }\n    else if (data.bounds.top > data.canvasSize.height && data.direction === \"bottom\") {\n        data.particle.position.y = data.canvasSize.height - data.size - data.offset.y;\n    }\n    const velocity = data.particle.velocity.y;\n    let bounced = false;\n    if ((data.direction === \"bottom\" && data.bounds.bottom >= data.canvasSize.height && velocity > 0) ||\n        (data.direction === \"top\" && data.bounds.top <= 0 && velocity < 0)) {\n        const newVelocity = getValue(data.particle.options.bounce.vertical);\n        data.particle.velocity.y *= -newVelocity;\n        bounced = true;\n    }\n    if (!bounced) {\n        return;\n    }\n    const minPos = data.offset.y + data.size;\n    if (data.bounds.bottom >= data.canvasSize.height && data.direction === \"bottom\") {\n        data.particle.position.y = data.canvasSize.height - minPos;\n    }\n    else if (data.bounds.top <= 0 && data.direction === \"top\") {\n        data.particle.position.y = minPos;\n    }\n    if (data.outMode === \"split\") {\n        data.particle.destroy();\n    }\n}\n","import { calculateBounds, } from \"tsparticles-engine\";\nimport { bounceHorizontal, bounceVertical } from \"./Utils\";\nexport class BounceOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\n            \"bounce\",\n            \"bounce-vertical\",\n            \"bounce-horizontal\",\n            \"bounceVertical\",\n            \"bounceHorizontal\",\n            \"split\",\n        ];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = calculateBounds(pos, size), canvasSize = container.canvas.size;\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n}\n","import { Vector, getDistances, isPointInside, } from \"tsparticles-engine\";\nexport class DestroyOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\"destroy\"];\n    }\n    update(particle, direction, _delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        switch (particle.outType) {\n            case \"normal\":\n            case \"outside\":\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\n                    return;\n                }\n                break;\n            case \"inside\": {\n                const { dx, dy } = getDistances(particle.position, particle.moveCenter);\n                const { x: vx, y: vy } = particle.velocity;\n                if ((vx < 0 && dx > particle.moveCenter.radius) ||\n                    (vy < 0 && dy > particle.moveCenter.radius) ||\n                    (vx >= 0 && dx < -particle.moveCenter.radius) ||\n                    (vy >= 0 && dy < -particle.moveCenter.radius)) {\n                    return;\n                }\n                break;\n            }\n        }\n        container.particles.remove(particle, undefined, true);\n    }\n}\n","import { Vector, isPointInside, } from \"tsparticles-engine\";\nexport class NoneOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\"none\"];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        if ((particle.options.move.distance.horizontal &&\n            (direction === \"left\" || direction === \"right\")) ||\n            (particle.options.move.distance.vertical &&\n                (direction === \"top\" || direction === \"bottom\"))) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity, container = this.container;\n        const canvasSize = container.canvas.size;\n        const pRadius = particle.getRadius();\n        if (!gravityOptions.enable) {\n            if ((particle.velocity.y > 0 && particle.position.y <= canvasSize.height + pRadius) ||\n                (particle.velocity.y < 0 && particle.position.y >= -pRadius) ||\n                (particle.velocity.x > 0 && particle.position.x <= canvasSize.width + pRadius) ||\n                (particle.velocity.x < 0 && particle.position.x >= -pRadius)) {\n                return;\n            }\n            if (!isPointInside(particle.position, container.canvas.size, Vector.origin, pRadius, direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((!gravityOptions.inverse &&\n                position.y > canvasSize.height + pRadius &&\n                direction === \"bottom\") ||\n                (gravityOptions.inverse && position.y < -pRadius && direction === \"top\")) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\n","import { Vector, calculateBounds, getDistances, getRandom, isPointInside, randomInRange, } from \"tsparticles-engine\";\nexport class OutOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\"out\"];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        switch (particle.outType) {\n            case \"inside\": {\n                const { x: vx, y: vy } = particle.velocity;\n                const circVec = Vector.origin;\n                circVec.length = particle.moveCenter.radius;\n                circVec.angle = particle.velocity.angle + Math.PI;\n                circVec.addTo(Vector.create(particle.moveCenter));\n                const { dx, dy } = getDistances(particle.position, circVec);\n                if ((vx <= 0 && dx >= 0) || (vy <= 0 && dy >= 0) || (vx >= 0 && dx <= 0) || (vy >= 0 && dy <= 0)) {\n                    return;\n                }\n                particle.position.x = Math.floor(randomInRange({\n                    min: 0,\n                    max: container.canvas.size.width,\n                }));\n                particle.position.y = Math.floor(randomInRange({\n                    min: 0,\n                    max: container.canvas.size.height,\n                }));\n                const { dx: newDx, dy: newDy } = getDistances(particle.position, particle.moveCenter);\n                particle.direction = Math.atan2(-newDy, -newDx);\n                particle.velocity.angle = particle.direction;\n                break;\n            }\n            default: {\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\n                    return;\n                }\n                switch (particle.outType) {\n                    case \"outside\": {\n                        particle.position.x =\n                            Math.floor(randomInRange({\n                                min: -particle.moveCenter.radius,\n                                max: particle.moveCenter.radius,\n                            })) + particle.moveCenter.x;\n                        particle.position.y =\n                            Math.floor(randomInRange({\n                                min: -particle.moveCenter.radius,\n                                max: particle.moveCenter.radius,\n                            })) + particle.moveCenter.y;\n                        const { dx, dy } = getDistances(particle.position, particle.moveCenter);\n                        if (particle.moveCenter.radius) {\n                            particle.direction = Math.atan2(dy, dx);\n                            particle.velocity.angle = particle.direction;\n                        }\n                        break;\n                    }\n                    case \"normal\": {\n                        const wrap = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {\n                            bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\n                            left: -particle.getRadius() - particle.offset.x,\n                            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n                            top: -particle.getRadius() - particle.offset.y,\n                        }, sizeValue = particle.getRadius(), nextBounds = calculateBounds(particle.position, sizeValue);\n                        if (direction === \"right\" &&\n                            nextBounds.left > canvasSize.width + particle.offset.x) {\n                            particle.position.x = newPos.left;\n                            particle.initialPosition.x = particle.position.x;\n                            if (!wrap) {\n                                particle.position.y = getRandom() * canvasSize.height;\n                                particle.initialPosition.y = particle.position.y;\n                            }\n                        }\n                        else if (direction === \"left\" && nextBounds.right < -particle.offset.x) {\n                            particle.position.x = newPos.right;\n                            particle.initialPosition.x = particle.position.x;\n                            if (!wrap) {\n                                particle.position.y = getRandom() * canvasSize.height;\n                                particle.initialPosition.y = particle.position.y;\n                            }\n                        }\n                        if (direction === \"bottom\" &&\n                            nextBounds.top > canvasSize.height + particle.offset.y) {\n                            if (!wrap) {\n                                particle.position.x = getRandom() * canvasSize.width;\n                                particle.initialPosition.x = particle.position.x;\n                            }\n                            particle.position.y = newPos.top;\n                            particle.initialPosition.y = particle.position.y;\n                        }\n                        else if (direction === \"top\" && nextBounds.bottom < -particle.offset.y) {\n                            if (!wrap) {\n                                particle.position.x = getRandom() * canvasSize.width;\n                                particle.initialPosition.x = particle.position.x;\n                            }\n                            particle.position.y = newPos.bottom;\n                            particle.initialPosition.y = particle.position.y;\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n}\n","import { BounceOutMode } from \"./BounceOutMode\";\nimport { DestroyOutMode } from \"./DestroyOutMode\";\nimport { NoneOutMode } from \"./NoneOutMode\";\nimport { OutOutMode } from \"./OutOutMode\";\nexport class OutOfCanvasUpdater {\n    constructor(container) {\n        this.container = container;\n        this._updateOutMode = (particle, delta, outMode, direction) => {\n            for (const updater of this.updaters) {\n                updater.update(particle, direction, delta, outMode);\n            }\n        };\n        this.updaters = [\n            new BounceOutMode(container),\n            new DestroyOutMode(container),\n            new OutOutMode(container),\n            new NoneOutMode(container),\n        ];\n    }\n    init() {\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning;\n    }\n    update(particle, delta) {\n        const outModes = particle.options.move.outModes;\n        this._updateOutMode(particle, delta, outModes.bottom ?? outModes.default, \"bottom\");\n        this._updateOutMode(particle, delta, outModes.left ?? outModes.default, \"left\");\n        this._updateOutMode(particle, delta, outModes.right ?? outModes.default, \"right\");\n        this._updateOutMode(particle, delta, outModes.top ?? outModes.default, \"top\");\n    }\n}\n","import { OutOfCanvasUpdater } from \"./OutOfCanvasUpdater\";\nexport async function loadOutModesUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"outModes\", (container) => new OutOfCanvasUpdater(container), refresh);\n}\n","import { clamp } from \"tsparticles-engine\";\nfunction checkDestroy(particle, value, minValue, maxValue) {\n    switch (particle.options.size.animation.destroy) {\n        case \"max\":\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case \"min\":\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nexport function updateSize(particle, delta) {\n    const data = particle.size;\n    if (particle.destroyed ||\n        !data ||\n        !data.enable ||\n        ((data.maxLoops ?? 0) > 0 && (data.loops ?? 0) > (data.maxLoops ?? 0))) {\n        return;\n    }\n    const sizeVelocity = (data.velocity ?? 0) * delta.factor, minValue = data.min, maxValue = data.max, decay = data.decay ?? 1;\n    if (!data.time) {\n        data.time = 0;\n    }\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n        data.time += delta.value;\n    }\n    if ((data.delayTime ?? 0) > 0 && data.time < (data.delayTime ?? 0)) {\n        return;\n    }\n    switch (data.status) {\n        case \"increasing\":\n            if (data.value >= maxValue) {\n                data.status = \"decreasing\";\n                if (!data.loops) {\n                    data.loops = 0;\n                }\n                data.loops++;\n            }\n            else {\n                data.value += sizeVelocity;\n            }\n            break;\n        case \"decreasing\":\n            if (data.value <= minValue) {\n                data.status = \"increasing\";\n                if (!data.loops) {\n                    data.loops = 0;\n                }\n                data.loops++;\n            }\n            else {\n                data.value -= sizeVelocity;\n            }\n    }\n    if (data.velocity && decay !== 1) {\n        data.velocity *= decay;\n    }\n    checkDestroy(particle, data.value, minValue, maxValue);\n    if (!particle.destroyed) {\n        data.value = clamp(data.value, minValue, maxValue);\n    }\n}\n","import { getRandom } from \"tsparticles-engine\";\nimport { updateSize } from \"./Utils\";\nexport class SizeUpdater {\n    init(particle) {\n        const container = particle.container, sizeOptions = particle.options.size, sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            particle.size.velocity =\n                ((particle.retina.sizeAnimationSpeed ?? container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                particle.size.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            particle.size.enable &&\n            ((particle.size.maxLoops ?? 0) <= 0 ||\n                ((particle.size.maxLoops ?? 0) > 0 && (particle.size.loops ?? 0) < (particle.size.maxLoops ?? 0))));\n    }\n    reset(particle) {\n        particle.size.loops = 0;\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateSize(particle, delta);\n    }\n}\n","import { SizeUpdater } from \"./SizeUpdater\";\nexport async function loadSizeUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"size\", () => new SizeUpdater(), refresh);\n}\n","import { loadBaseMover } from \"tsparticles-move-base\";\nimport { loadCircleShape } from \"tsparticles-shape-circle\";\nimport { loadColorUpdater } from \"tsparticles-updater-color\";\nimport { loadOpacityUpdater } from \"tsparticles-updater-opacity\";\nimport { loadOutModesUpdater } from \"tsparticles-updater-out-modes\";\nimport { loadSizeUpdater } from \"tsparticles-updater-size\";\nexport async function loadBasic(engine, refresh = true) {\n    await loadBaseMover(engine, false);\n    await loadCircleShape(engine, false);\n    await loadColorUpdater(engine, false);\n    await loadOpacityUpdater(engine, false);\n    await loadOutModesUpdater(engine, false);\n    await loadSizeUpdater(engine, false);\n    await engine.refresh(refresh);\n}\n","import { addEasing } from \"tsparticles-engine\";\nexport async function loadEasingQuadPlugin() {\n    addEasing(\"ease-in-quad\", (value) => value ** 2);\n    addEasing(\"ease-out-quad\", (value) => 1 - (1 - value) ** 2);\n    addEasing(\"ease-in-out-quad\", (value) => (value < 0.5 ? 2 * value ** 2 : 1 - (-2 * value + 2) ** 2 / 2));\n}\n","export class Attract {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.easing = \"ease-out-quad\";\n        this.factor = 1;\n        this.maxSpeed = 50;\n        this.speed = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.easing !== undefined) {\n            this.easing = data.easing;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = data.maxSpeed;\n        }\n        if (data.speed !== undefined) {\n            this.speed = data.speed;\n        }\n    }\n}\n","import { Circle, ExternalInteractorBase, Vector, clamp, getDistances, getEasing, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Attract } from \"./Options/Classes/Attract\";\nexport class Attractor extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._clickAttract = () => {\n            const container = this.container;\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            const { attract } = container;\n            if (!attract.finish) {\n                if (!attract.count) {\n                    attract.count = 0;\n                }\n                attract.count++;\n                if (attract.count === container.particles.count) {\n                    attract.finish = true;\n                }\n            }\n            if (attract.clicking) {\n                const mousePos = container.interactivity.mouse.clickPosition, attractRadius = container.retina.attractModeDistance;\n                if (!attractRadius || attractRadius < 0 || !mousePos) {\n                    return;\n                }\n                this._processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n            }\n            else if (attract.clicking === false) {\n                attract.particles = [];\n            }\n            return;\n        };\n        this._hoverAttract = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, attractRadius = container.retina.attractModeDistance;\n            if (!attractRadius || attractRadius < 0 || !mousePos) {\n                return;\n            }\n            this._processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n        };\n        this._processAttract = (position, attractRadius, area) => {\n            const container = this.container, attractOptions = container.actualOptions.interactivity.modes.attract;\n            if (!attractOptions) {\n                return;\n            }\n            const query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                const { dx, dy, distance } = getDistances(particle.position, position);\n                const velocity = attractOptions.speed * attractOptions.factor;\n                const attractFactor = clamp(getEasing(attractOptions.easing)(1 - distance / attractRadius) * velocity, 0, attractOptions.maxSpeed);\n                const normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * attractFactor, distance === 0 ? velocity : (dy / distance) * attractFactor);\n                particle.position.subFrom(normVec);\n            }\n        };\n        this._engine = engine;\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, attract = options.interactivity.modes.attract;\n            if (!attract || mode !== \"attract\") {\n                return;\n            }\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            container.attract.clicking = true;\n            container.attract.count = 0;\n            for (const particle of container.attract.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            container.attract.particles = [];\n            container.attract.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                if (!container.attract) {\n                    container.attract = { particles: [] };\n                }\n                container.attract.clicking = false;\n            }, attract.duration * 1000);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, attract = container.actualOptions.interactivity.modes.attract;\n        if (!attract) {\n            return;\n        }\n        container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\n            this._hoverAttract();\n        }\n        else if (clickEnabled && isInArray(\"attract\", clickMode)) {\n            this._clickAttract();\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\n        return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.attract) {\n            options.attract = new Attract();\n        }\n        for (const source of sources) {\n            options.attract.load(source?.attract);\n        }\n    }\n    reset() {\n    }\n}\n","import { Attractor } from \"./Attractor\";\nexport async function loadExternalAttractInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalAttract\", (container) => new Attractor(engine, container), refresh);\n}\nexport * from \"./Options/Classes/Attract\";\nexport * from \"./Options/Interfaces/IAttract\";\n","export class Bounce {\n    constructor() {\n        this.distance = 200;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n    }\n}\n","import { Circle, ExternalInteractorBase, Rectangle, Vector, calculateBounds, circleBounce, circleBounceDataFromParticle, divModeExecute, isDivModeEnabled, isInArray, mouseMoveEvent, rectBounce, } from \"tsparticles-engine\";\nimport { Bounce } from \"./Options/Classes/Bounce\";\nexport class Bouncer extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this._processBounce = (position, radius, area) => {\n            const query = this.container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                if (area instanceof Circle) {\n                    circleBounce(circleBounceDataFromParticle(particle), {\n                        position,\n                        radius,\n                        mass: (radius ** 2 * Math.PI) / 2,\n                        velocity: Vector.origin,\n                        factor: Vector.origin,\n                    });\n                }\n                else if (area instanceof Rectangle) {\n                    rectBounce(particle, calculateBounds(position, radius));\n                }\n            }\n        };\n        this._processMouseBounce = () => {\n            const container = this.container, pxRatio = container.retina.pixelRatio, tolerance = 10 * pxRatio, mousePos = container.interactivity.mouse.position, radius = container.retina.bounceModeDistance;\n            if (!radius || radius < 0 || !mousePos) {\n                return;\n            }\n            this._processBounce(mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance));\n        };\n        this._singleSelectorBounce = (selector, div) => {\n            const container = this.container, query = document.querySelectorAll(selector);\n            if (!query.length) {\n                return;\n            }\n            query.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n                }, radius = (elem.offsetWidth / 2) * pxRatio, tolerance = 10 * pxRatio, area = div.type === \"circle\"\n                    ? new Circle(pos.x, pos.y, radius + tolerance)\n                    : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);\n                this._processBounce(pos, radius, area);\n            });\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, bounce = container.actualOptions.interactivity.modes.bounce;\n        if (!bounce) {\n            return;\n        }\n        container.retina.bounceModeDistance = bounce.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"bounce\", hoverMode)) {\n            this._processMouseBounce();\n        }\n        else {\n            divModeExecute(\"bounce\", divs, (selector, div) => this._singleSelectorBounce(selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv;\n        return ((mouse.position && events.onHover.enable && isInArray(\"bounce\", events.onHover.mode)) ||\n            isDivModeEnabled(\"bounce\", divs));\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bounce) {\n            options.bounce = new Bounce();\n        }\n        for (const source of sources) {\n            options.bounce.load(source?.bounce);\n        }\n    }\n    reset() {\n    }\n}\n","import { Bouncer } from \"./Bouncer\";\nexport async function loadExternalBounceInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalBounce\", (container) => new Bouncer(container), refresh);\n}\nexport * from \"./Options/Classes/Bounce\";\nexport * from \"./Options/Interfaces/IBounce\";\n","import { OptionsColor, executeOnSingleOrMultiple, isArray, } from \"tsparticles-engine\";\nexport class BubbleBase {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.mix = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.mix !== undefined) {\n            this.mix = data.mix;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        if (data.color !== undefined) {\n            const sourceColor = isArray(this.color) ? undefined : this.color;\n            this.color = executeOnSingleOrMultiple(data.color, (color) => {\n                return OptionsColor.create(sourceColor, color);\n            });\n        }\n        if (data.size !== undefined) {\n            this.size = data.size;\n        }\n    }\n}\n","import { executeOnSingleOrMultiple, } from \"tsparticles-engine\";\nimport { BubbleBase } from \"./BubbleBase\";\nexport class BubbleDiv extends BubbleBase {\n    constructor() {\n        super();\n        this.selectors = [];\n    }\n    get ids() {\n        return executeOnSingleOrMultiple(this.selectors, (t) => t.replace(\"#\", \"\"));\n    }\n    set ids(value) {\n        this.selectors = executeOnSingleOrMultiple(value, (t) => `#${t}`);\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        if (data.ids !== undefined) {\n            this.ids = data.ids;\n        }\n        if (data.selectors !== undefined) {\n            this.selectors = data.selectors;\n        }\n    }\n}\n","import { executeOnSingleOrMultiple, } from \"tsparticles-engine\";\nimport { BubbleBase } from \"./BubbleBase\";\nimport { BubbleDiv } from \"./BubbleDiv\";\nexport class Bubble extends BubbleBase {\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        this.divs = executeOnSingleOrMultiple(data.divs, (div) => {\n            const tmp = new BubbleDiv();\n            tmp.load(div);\n            return tmp;\n        });\n    }\n}\n","import { clamp } from \"tsparticles-engine\";\nexport function calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\n","import { Circle, ExternalInteractorBase, Rectangle, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl, } from \"tsparticles-engine\";\nimport { Bubble } from \"./Options/Classes/Bubble\";\nimport { calculateBubbleValue } from \"./Utils\";\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this._clickBubble = () => {\n            const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || !mouseClickPos) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            const distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < 0) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, (p) => this.isEnabled(p)), { bubble } = container;\n            for (const particle of query) {\n                if (!bubble.clicking) {\n                    continue;\n                }\n                particle.bubble.inRange = !bubble.durationEnd;\n                const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n                if (timeSpent > bubbleOptions.duration) {\n                    bubble.durationEnd = true;\n                }\n                if (timeSpent > bubbleOptions.duration * 2) {\n                    bubble.clicking = false;\n                    bubble.durationEnd = false;\n                }\n                const sizeData = {\n                    bubbleObj: {\n                        optValue: container.retina.bubbleModeSize,\n                        value: particle.bubble.radius,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                        value: particle.size.value,\n                    },\n                    type: \"size\",\n                };\n                this._process(particle, distMouse, timeSpent, sizeData);\n                const opacityData = {\n                    bubbleObj: {\n                        optValue: bubbleOptions.opacity,\n                        value: particle.bubble.opacity,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.opacity.value),\n                        value: particle.opacity?.value ?? 1,\n                    },\n                    type: \"opacity\",\n                };\n                this._process(particle, distMouse, timeSpent, opacityData);\n                if (!bubble.durationEnd && distMouse <= distance) {\n                    this._hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n        };\n        this._hoverBubble = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < 0 || mousePos === undefined) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                particle.bubble.inRange = true;\n                const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = 1 - pointDistance / distance;\n                if (pointDistance <= distance) {\n                    if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n                        this._hoverBubbleSize(particle, ratio);\n                        this._hoverBubbleOpacity(particle, ratio);\n                        this._hoverBubbleColor(particle, ratio);\n                    }\n                }\n                else {\n                    this.reset(particle);\n                }\n                if (container.interactivity.status === mouseLeaveEvent) {\n                    this.reset(particle);\n                }\n            }\n        };\n        this._hoverBubbleColor = (particle, ratio, divBubble) => {\n            const options = this.container.actualOptions, bubbleOptions = divBubble ?? options.interactivity.modes.bubble;\n            if (!bubbleOptions) {\n                return;\n            }\n            if (!particle.bubble.finalColor) {\n                const modeColor = bubbleOptions.color;\n                if (!modeColor) {\n                    return;\n                }\n                const bubbleColor = itemFromSingleOrMultiple(modeColor);\n                particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n            }\n            if (!particle.bubble.finalColor) {\n                return;\n            }\n            if (bubbleOptions.mix) {\n                particle.bubble.color = undefined;\n                const pColor = particle.getFillColor();\n                particle.bubble.color = pColor\n                    ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                    : particle.bubble.finalColor;\n            }\n            else {\n                particle.bubble.color = particle.bubble.finalColor;\n            }\n        };\n        this._hoverBubbleOpacity = (particle, ratio, divBubble) => {\n            const container = this.container, options = container.actualOptions, modeOpacity = divBubble?.opacity ?? options.interactivity.modes.bubble?.opacity;\n            if (!modeOpacity) {\n                return;\n            }\n            const optOpacity = particle.options.opacity.value, pOpacity = particle.opacity?.value ?? 1, opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n            if (opacity !== undefined) {\n                particle.bubble.opacity = opacity;\n            }\n        };\n        this._hoverBubbleSize = (particle, ratio, divBubble) => {\n            const container = this.container, modeSize = divBubble?.size ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n            if (modeSize === undefined) {\n                return;\n            }\n            const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio, pSize = particle.size.value, size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n            if (size !== undefined) {\n                particle.bubble.radius = size;\n            }\n        };\n        this._process = (particle, distMouse, timeSpent, data) => {\n            const container = this.container, bubbleParam = data.bubbleObj.optValue, options = container.actualOptions, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || bubbleParam === undefined) {\n                return;\n            }\n            const bubbleDuration = bubbleOptions.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n            if (!bubbleDistance || bubbleDistance < 0 || bubbleParam === particlesParam) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            if (container.bubble.durationEnd) {\n                if (pObjBubble) {\n                    if (type === \"size\") {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === \"opacity\") {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n            else {\n                if (distMouse <= bubbleDistance) {\n                    const obj = pObjBubble ?? pObj;\n                    if (obj !== bubbleParam) {\n                        const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                        if (type === \"size\") {\n                            particle.bubble.radius = value;\n                        }\n                        if (type === \"opacity\") {\n                            particle.bubble.opacity = value;\n                        }\n                    }\n                }\n                else {\n                    if (type === \"size\") {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === \"opacity\") {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n        };\n        this._singleSelectorHover = (delta, selector, div) => {\n            const container = this.container, selectors = document.querySelectorAll(selector), bubble = container.actualOptions.interactivity.modes.bubble;\n            if (!bubble || !selectors.length) {\n                return;\n            }\n            selectors.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n                }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n                for (const particle of query) {\n                    if (!area.contains(particle.getPosition())) {\n                        continue;\n                    }\n                    particle.bubble.inRange = true;\n                    const divs = bubble.divs, divBubble = divMode(divs, elem);\n                    if (!particle.bubble.div || particle.bubble.div !== elem) {\n                        this.clear(particle, delta, true);\n                        particle.bubble.div = elem;\n                    }\n                    this._hoverBubbleSize(particle, 1, divBubble);\n                    this._hoverBubbleOpacity(particle, 1, divBubble);\n                    this._hoverBubbleColor(particle, 1, divBubble);\n                }\n            });\n        };\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== \"bubble\") {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    clear(particle, delta, force) {\n        if (particle.bubble.inRange && !force) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    init() {\n        const container = this.container, bubble = container.actualOptions.interactivity.modes.bubble;\n        if (!bubble) {\n            return;\n        }\n        container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n        if (bubble.size !== undefined) {\n            container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n        }\n    }\n    async interact(delta) {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n            this._hoverBubble();\n        }\n        else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n            this._clickBubble();\n        }\n        else {\n            divModeExecute(\"bubble\", divs, (selector, div) => this._singleSelectorHover(delta, selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, { onClick, onDiv, onHover } = events, divBubble = isDivModeEnabled(\"bubble\", onDiv);\n        if (!(divBubble || (onHover.enable && mouse.position) || (onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        return isInArray(\"bubble\", onHover.mode) || isInArray(\"bubble\", onClick.mode) || divBubble;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bubble) {\n            options.bubble = new Bubble();\n        }\n        for (const source of sources) {\n            options.bubble.load(source?.bubble);\n        }\n    }\n    reset(particle) {\n        particle.bubble.inRange = false;\n    }\n}\n","import { Bubbler } from \"./Bubbler\";\nexport async function loadExternalBubbleInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalBubble\", (container) => new Bubbler(container), refresh);\n}\nexport * from \"./Options/Classes/BubbleBase\";\nexport * from \"./Options/Classes/BubbleDiv\";\nexport * from \"./Options/Classes/Bubble\";\nexport * from \"./Options/Interfaces/IBubbleBase\";\nexport * from \"./Options/Interfaces/IBubbleDiv\";\nexport * from \"./Options/Interfaces/IBubble\";\n","export class ConnectLinks {\n    constructor() {\n        this.opacity = 0.5;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n","import { ConnectLinks } from \"./ConnectLinks\";\nexport class Connect {\n    constructor() {\n        this.distance = 80;\n        this.links = new ConnectLinks();\n        this.radius = 60;\n    }\n    get lineLinked() {\n        return this.links;\n    }\n    set lineLinked(value) {\n        this.links = value;\n    }\n    get line_linked() {\n        return this.links;\n    }\n    set line_linked(value) {\n        this.links = value;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        this.links.load(data.links ?? data.lineLinked ?? data.line_linked);\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n","import { colorMix, drawLine, getStyleFromHsl, getStyleFromRgb, } from \"tsparticles-engine\";\nexport function gradient(context, p1, p2, opacity) {\n    const gradStop = Math.floor(p2.getRadius() / p1.getRadius()), color1 = p1.getFillColor(), color2 = p2.getFillColor();\n    if (!color1 || !color2) {\n        return;\n    }\n    const sourcePos = p1.getPosition(), destPos = p2.getPosition(), midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()), grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(0, getStyleFromHsl(color1, opacity));\n    grad.addColorStop(gradStop > 1 ? 1 : gradStop, getStyleFromRgb(midRgb, opacity));\n    grad.addColorStop(1, getStyleFromHsl(color2, opacity));\n    return grad;\n}\nexport function drawConnectLine(context, width, lineStyle, begin, end) {\n    drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n}\nexport function lineStyle(container, ctx, p1, p2) {\n    const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;\n    if (!connectOptions) {\n        return;\n    }\n    return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\nexport function drawConnection(container, p1, p2) {\n    container.canvas.draw((ctx) => {\n        const ls = lineStyle(container, ctx, p1, p2);\n        if (!ls) {\n            return;\n        }\n        const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        drawConnectLine(ctx, p1.retina.linksWidth ?? 0, ls, pos1, pos2);\n    });\n}\n","import { ExternalInteractorBase, isInArray, } from \"tsparticles-engine\";\nimport { Connect } from \"./Options/Classes/Connect\";\nimport { drawConnection } from \"./Utils\";\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;\n        if (!connect) {\n            return;\n        }\n        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n            const mousePos = container.interactivity.mouse.position;\n            if (!container.retina.connectModeDistance ||\n                container.retina.connectModeDistance < 0 ||\n                !container.retina.connectModeRadius ||\n                container.retina.connectModeRadius < 0 ||\n                !mousePos) {\n                return;\n            }\n            const distance = Math.abs(container.retina.connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            let i = 0;\n            for (const p1 of query) {\n                const pos1 = p1.getPosition();\n                for (const p2 of query.slice(i + 1)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(container.retina.connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        drawConnection(container, p1, p2);\n                    }\n                }\n                ++i;\n            }\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(\"connect\", events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.connect) {\n            options.connect = new Connect();\n        }\n        for (const source of sources) {\n            options.connect.load(source?.connect);\n        }\n    }\n    reset() {\n    }\n}\n","import { Connector } from \"./Connector\";\nexport async function loadExternalConnectInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalConnect\", (container) => new Connector(container), refresh);\n}\nexport * from \"./Options/Classes/Connect\";\nexport * from \"./Options/Classes/ConnectLinks\";\nexport * from \"./Options/Interfaces/IConnect\";\nexport * from \"./Options/Interfaces/IConnectLinks\";\n","import { OptionsColor } from \"tsparticles-engine\";\nexport class GrabLinks {\n    constructor() {\n        this.blink = false;\n        this.consent = false;\n        this.opacity = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.blink !== undefined) {\n            this.blink = data.blink;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.consent !== undefined) {\n            this.consent = data.consent;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n","import { GrabLinks } from \"./GrabLinks\";\nexport class Grab {\n    constructor() {\n        this.distance = 100;\n        this.links = new GrabLinks();\n    }\n    get lineLinked() {\n        return this.links;\n    }\n    set lineLinked(value) {\n        this.links = value;\n    }\n    get line_linked() {\n        return this.links;\n    }\n    set line_linked(value) {\n        this.links = value;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        this.links.load(data.links ?? data.lineLinked ?? data.line_linked);\n    }\n}\n","import { drawLine, getStyleFromRgb } from \"tsparticles-engine\";\nexport function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n    drawLine(context, begin, end);\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n}\nexport function drawGrab(container, particle, lineColor, opacity, mousePos) {\n    container.canvas.draw((ctx) => {\n        const beginPos = particle.getPosition();\n        drawGrabLine(ctx, particle.retina.linksWidth ?? 0, beginPos, mousePos, lineColor, opacity);\n    });\n}\n","import { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Grab } from \"./Options/Classes/Grab\";\nimport { drawGrab } from \"./Utils\";\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, grab = container.actualOptions.interactivity.modes.grab;\n        if (!grab) {\n            return;\n        }\n        container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.modes.grab ||\n            !interactivity.events.onHover.enable ||\n            container.interactivity.status !== mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance;\n        if (!distance || distance < 0) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= 0) {\n                continue;\n            }\n            const optColor = grabLineOptions.color ?? particle.options.links?.color;\n            if (!container.particles.grabLineColor && optColor) {\n                const linksOptions = interactivity.modes.grab.links;\n                container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                continue;\n            }\n            drawGrab(container, particle, colorLine, opacityLine, mousePos);\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.grab) {\n            options.grab = new Grab();\n        }\n        for (const source of sources) {\n            options.grab.load(source?.grab);\n        }\n    }\n    reset() {\n    }\n}\n","import { Grabber } from \"./Grabber\";\nexport async function loadExternalGrabInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalGrab\", (container) => new Grabber(container), refresh);\n}\nexport * from \"./Options/Classes/Grab\";\nexport * from \"./Options/Classes/GrabLinks\";\nexport * from \"./Options/Interfaces/IGrab\";\nexport * from \"./Options/Interfaces/IGrabLinks\";\n","import { ExternalInteractorBase } from \"tsparticles-engine\";\nexport class Pauser extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            if (mode !== \"pause\") {\n                return;\n            }\n            const container = this.container;\n            if (container.getAnimationStatus()) {\n                container.pause();\n            }\n            else {\n                container.play();\n            }\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    reset() {\n    }\n}\n","import { Pauser } from \"./Pauser\";\nexport async function loadExternalPauseInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalPause\", (container) => new Pauser(container), refresh);\n}\n","import { setRangeValue } from \"tsparticles-engine\";\nexport class Push {\n    constructor() {\n        this.default = true;\n        this.groups = [];\n        this.quantity = 4;\n    }\n    get particles_nb() {\n        return this.quantity;\n    }\n    set particles_nb(value) {\n        this.quantity = setRangeValue(value);\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.default !== undefined) {\n            this.default = data.default;\n        }\n        if (data.groups !== undefined) {\n            this.groups = data.groups.map((t) => t);\n        }\n        if (!this.groups.length) {\n            this.default = true;\n        }\n        const quantity = data.quantity ?? data.particles_nb;\n        if (quantity !== undefined) {\n            this.quantity = setRangeValue(quantity);\n        }\n    }\n}\n","import { ExternalInteractorBase, getRangeValue, itemFromArray, } from \"tsparticles-engine\";\nimport { Push } from \"./Options/Classes/Push\";\nexport class Pusher extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            if (mode !== \"push\") {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, pushOptions = options.interactivity.modes.push;\n            if (!pushOptions) {\n                return;\n            }\n            const quantity = getRangeValue(pushOptions.quantity);\n            if (quantity <= 0) {\n                return;\n            }\n            const group = itemFromArray([undefined, ...pushOptions.groups]), groupOptions = group !== undefined ? container.actualOptions.particles.groups[group] : undefined;\n            container.particles.push(quantity, container.interactivity.mouse, groupOptions, group);\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.push) {\n            options.push = new Push();\n        }\n        for (const source of sources) {\n            options.push.load(source?.push);\n        }\n    }\n    reset() {\n    }\n}\n","import { Pusher } from \"./Pusher\";\nexport async function loadExternalPushInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalPush\", (container) => new Pusher(container), refresh);\n}\nexport * from \"./Options/Classes/Push\";\nexport * from \"./Options/Interfaces/IPush\";\n","import { setRangeValue } from \"tsparticles-engine\";\nexport class Remove {\n    constructor() {\n        this.quantity = 2;\n    }\n    get particles_nb() {\n        return this.quantity;\n    }\n    set particles_nb(value) {\n        this.quantity = setRangeValue(value);\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        const quantity = data.quantity ?? data.particles_nb;\n        if (quantity !== undefined) {\n            this.quantity = setRangeValue(quantity);\n        }\n    }\n}\n","import { ExternalInteractorBase, getRangeValue, } from \"tsparticles-engine\";\nimport { Remove } from \"./Options/Classes/Remove\";\nexport class Remover extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            const container = this.container, options = container.actualOptions;\n            if (!options.interactivity.modes.remove || mode !== \"remove\") {\n                return;\n            }\n            const removeNb = getRangeValue(options.interactivity.modes.remove.quantity);\n            container.particles.removeQuantity(removeNb);\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.remove) {\n            options.remove = new Remove();\n        }\n        for (const source of sources) {\n            options.remove.load(source?.remove);\n        }\n    }\n    reset() {\n    }\n}\n","import { Remover } from \"./Remover\";\nexport async function loadExternalRemoveInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalRemove\", (container) => new Remover(container), refresh);\n}\nexport * from \"./Options/Classes/Remove\";\nexport * from \"./Options/Interfaces/IRemove\";\n","export class RepulseBase {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.factor = 100;\n        this.speed = 1;\n        this.maxSpeed = 50;\n        this.easing = \"ease-out-quad\";\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.easing !== undefined) {\n            this.easing = data.easing;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.speed !== undefined) {\n            this.speed = data.speed;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = data.maxSpeed;\n        }\n    }\n}\n","import { executeOnSingleOrMultiple, } from \"tsparticles-engine\";\nimport { RepulseBase } from \"./RepulseBase\";\nexport class RepulseDiv extends RepulseBase {\n    constructor() {\n        super();\n        this.selectors = [];\n    }\n    get ids() {\n        return executeOnSingleOrMultiple(this.selectors, (t) => t.replace(\"#\", \"\"));\n    }\n    set ids(value) {\n        this.selectors = executeOnSingleOrMultiple(value, (t) => `#${t}`);\n    }\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        if (data.ids !== undefined) {\n            this.ids = data.ids;\n        }\n        if (data.selectors !== undefined) {\n            this.selectors = data.selectors;\n        }\n    }\n}\n","import { executeOnSingleOrMultiple, } from \"tsparticles-engine\";\nimport { RepulseBase } from \"./RepulseBase\";\nimport { RepulseDiv } from \"./RepulseDiv\";\nexport class Repulse extends RepulseBase {\n    load(data) {\n        super.load(data);\n        if (!data) {\n            return;\n        }\n        this.divs = executeOnSingleOrMultiple(data.divs, (div) => {\n            const tmp = new RepulseDiv();\n            tmp.load(div);\n            return tmp;\n        });\n    }\n}\n","import { Circle, ExternalInteractorBase, Rectangle, Vector, clamp, divMode, divModeExecute, getDistances, getEasing, isDivModeEnabled, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Repulse } from \"./Options/Classes/Repulse\";\nexport class Repulser extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._clickRepulse = () => {\n            const container = this.container, repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n                return;\n            }\n            const repulse = container.repulse || { particles: [] };\n            if (!repulse.finish) {\n                if (!repulse.count) {\n                    repulse.count = 0;\n                }\n                repulse.count++;\n                if (repulse.count === container.particles.count) {\n                    repulse.finish = true;\n                }\n            }\n            if (repulse.clicking) {\n                const repulseDistance = container.retina.repulseModeDistance;\n                if (!repulseDistance || repulseDistance < 0) {\n                    return;\n                }\n                const repulseRadius = Math.pow(repulseDistance / 6, 3), mouseClickPos = container.interactivity.mouse.clickPosition;\n                if (mouseClickPos === undefined) {\n                    return;\n                }\n                const range = new Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius), query = container.particles.quadTree.query(range, (p) => this.isEnabled(p));\n                for (const particle of query) {\n                    const { dx, dy, distance } = getDistances(mouseClickPos, particle.position), d = distance ** 2, velocity = repulseOptions.speed, force = (-repulseRadius * velocity) / d;\n                    if (d <= repulseRadius) {\n                        repulse.particles.push(particle);\n                        const vect = Vector.create(dx, dy);\n                        vect.length = force;\n                        particle.velocity.setTo(vect);\n                    }\n                }\n            }\n            else if (repulse.clicking === false) {\n                for (const particle of repulse.particles) {\n                    particle.velocity.setTo(particle.initialVelocity);\n                }\n                repulse.particles = [];\n            }\n        };\n        this._hoverRepulse = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, repulseRadius = container.retina.repulseModeDistance;\n            if (!repulseRadius || repulseRadius < 0 || !mousePos) {\n                return;\n            }\n            this._processRepulse(mousePos, repulseRadius, new Circle(mousePos.x, mousePos.y, repulseRadius));\n        };\n        this._processRepulse = (position, repulseRadius, area, divRepulse) => {\n            const container = this.container, query = container.particles.quadTree.query(area, (p) => this.isEnabled(p)), repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n                return;\n            }\n            for (const particle of query) {\n                const { dx, dy, distance } = getDistances(particle.position, position), velocity = (divRepulse?.speed ?? repulseOptions.speed) * repulseOptions.factor, repulseFactor = clamp(getEasing(repulseOptions.easing)(1 - distance / repulseRadius) * velocity, 0, repulseOptions.maxSpeed), normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * repulseFactor, distance === 0 ? velocity : (dy / distance) * repulseFactor);\n                particle.position.addTo(normVec);\n            }\n        };\n        this._singleSelectorRepulse = (selector, div) => {\n            const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\n            if (!repulse) {\n                return;\n            }\n            const query = document.querySelectorAll(selector);\n            if (!query.length) {\n                return;\n            }\n            query.forEach((item) => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n                }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), divs = repulse.divs, divRepulse = divMode(divs, elem);\n                this._processRepulse(pos, repulseRadius, area, divRepulse);\n            });\n        };\n        this._engine = engine;\n        if (!container.repulse) {\n            container.repulse = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, repulseOpts = options.interactivity.modes.repulse;\n            if (!repulseOpts || mode !== \"repulse\") {\n                return;\n            }\n            if (!container.repulse) {\n                container.repulse = { particles: [] };\n            }\n            const repulse = container.repulse;\n            repulse.clicking = true;\n            repulse.count = 0;\n            for (const particle of container.repulse.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            repulse.particles = [];\n            repulse.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                repulse.clicking = false;\n            }, repulseOpts.duration * 1000);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\n        if (!repulse) {\n            return;\n        }\n        container.retina.repulseModeDistance = repulse.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hover = events.onHover, hoverEnabled = hover.enable, hoverMode = hover.mode, click = events.onClick, clickEnabled = click.enable, clickMode = click.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"repulse\", hoverMode)) {\n            this._hoverRepulse();\n        }\n        else if (clickEnabled && isInArray(\"repulse\", clickMode)) {\n            this._clickRepulse();\n        }\n        else {\n            divModeExecute(\"repulse\", divs, (selector, div) => this._singleSelectorRepulse(selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv, hover = events.onHover, click = events.onClick, divRepulse = isDivModeEnabled(\"repulse\", divs);\n        if (!(divRepulse || (hover.enable && mouse.position) || (click.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = hover.mode, clickMode = click.mode;\n        return isInArray(\"repulse\", hoverMode) || isInArray(\"repulse\", clickMode) || divRepulse;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.repulse) {\n            options.repulse = new Repulse();\n        }\n        for (const source of sources) {\n            options.repulse.load(source?.repulse);\n        }\n    }\n    reset() {\n    }\n}\n","import { Repulser } from \"./Repulser\";\nexport async function loadExternalRepulseInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalRepulse\", (container) => new Repulser(engine, container), refresh);\n}\nexport * from \"./Options/Classes/RepulseBase\";\nexport * from \"./Options/Classes/RepulseDiv\";\nexport * from \"./Options/Classes/Repulse\";\nexport * from \"./Options/Interfaces/IRepulseBase\";\nexport * from \"./Options/Interfaces/IRepulseDiv\";\nexport * from \"./Options/Interfaces/IRepulse\";\n","export class Slow {\n    constructor() {\n        this.factor = 3;\n        this.radius = 200;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n","import { ExternalInteractorBase, getDistance, isInArray, } from \"tsparticles-engine\";\nimport { Slow } from \"./Options/Classes/Slow\";\nexport class Slower extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear(particle, delta, force) {\n        if (particle.slow.inRange && !force) {\n            return;\n        }\n        particle.slow.factor = 1;\n    }\n    init() {\n        const container = this.container, slow = container.actualOptions.interactivity.modes.slow;\n        if (!slow) {\n            return;\n        }\n        container.retina.slowModeRadius = slow.radius * container.retina.pixelRatio;\n    }\n    async interact() {\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(\"slow\", events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.slow) {\n            options.slow = new Slow();\n        }\n        for (const source of sources) {\n            options.slow.load(source?.slow);\n        }\n    }\n    reset(particle) {\n        particle.slow.inRange = false;\n        const container = this.container, options = container.actualOptions, mousePos = container.interactivity.mouse.position, radius = container.retina.slowModeRadius, slowOptions = options.interactivity.modes.slow;\n        if (!slowOptions || !radius || radius < 0 || !mousePos) {\n            return;\n        }\n        const particlePos = particle.getPosition(), dist = getDistance(mousePos, particlePos), proximityFactor = dist / radius, slowFactor = slowOptions.factor, { slow } = particle;\n        if (dist > radius) {\n            return;\n        }\n        slow.inRange = true;\n        slow.factor = proximityFactor / slowFactor;\n    }\n}\n","import { Slower } from \"./Slower\";\nexport async function loadExternalSlowInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"externalSlow\", (container) => new Slower(container), refresh);\n}\nexport * from \"./Options/Classes/Slow\";\nexport * from \"./Options/Interfaces/ISlow\";\n","export const InterlaceOffsets = [0, 4, 2, 1];\nexport const InterlaceSteps = [8, 8, 4, 2];\n","export class ByteStream {\n    constructor(bytes) {\n        this.pos = 0;\n        this.data = new Uint8ClampedArray(bytes);\n    }\n    getString(count) {\n        const slice = this.data.slice(this.pos, this.pos + count);\n        this.pos += slice.length;\n        return slice.reduce((acc, curr) => acc + String.fromCharCode(curr), \"\");\n    }\n    nextByte() {\n        return this.data[this.pos++];\n    }\n    nextTwoBytes() {\n        this.pos += 2;\n        return this.data[this.pos - 2] + (this.data[this.pos - 1] << 8);\n    }\n    readSubBlocks() {\n        let blockString = \"\", size = 0;\n        do {\n            size = this.data[this.pos++];\n            for (let count = size; --count >= 0; blockString += String.fromCharCode(this.data[this.pos++])) {\n            }\n        } while (size !== 0);\n        return blockString;\n    }\n    readSubBlocksBin() {\n        let size = 0, len = 0;\n        for (let offset = 0; (size = this.data[this.pos + offset]) !== 0; offset += size + 1) {\n            len += size;\n        }\n        const blockData = new Uint8Array(len);\n        for (let i = 0; (size = this.data[this.pos++]) !== 0;) {\n            for (let count = size; --count >= 0; blockData[i++] = this.data[this.pos++]) {\n            }\n        }\n        return blockData;\n    }\n    skipSubBlocks() {\n        for (; this.data[this.pos] !== 0; this.pos += this.data[this.pos] + 1) {\n        }\n        this.pos++;\n    }\n}\n","import { InterlaceOffsets, InterlaceSteps } from \"./Constants\";\nimport { ByteStream } from \"./ByteStream\";\nfunction parseColorTable(byteStream, count) {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n        colors.push({\n            r: byteStream.data[byteStream.pos],\n            g: byteStream.data[byteStream.pos + 1],\n            b: byteStream.data[byteStream.pos + 2],\n        });\n        byteStream.pos += 3;\n    }\n    return colors;\n}\nasync function parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\n    switch (byteStream.nextByte()) {\n        case 249: {\n            const frame = gif.frames[getFrameIndex(false)];\n            byteStream.pos++;\n            const packedByte = byteStream.nextByte();\n            frame.GCreserved = (packedByte & 0xe0) >>> 5;\n            frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n            frame.userInputDelayFlag = (packedByte & 2) === 2;\n            const transparencyFlag = (packedByte & 1) === 1;\n            frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n            const transparencyIndex = byteStream.nextByte();\n            if (transparencyFlag) {\n                getTransparencyIndex(transparencyIndex);\n            }\n            byteStream.pos++;\n            break;\n        }\n        case 255: {\n            byteStream.pos++;\n            const applicationExtension = {\n                identifier: byteStream.getString(8),\n                authenticationCode: byteStream.getString(3),\n                data: byteStream.readSubBlocksBin(),\n            };\n            gif.applicationExtensions.push(applicationExtension);\n            break;\n        }\n        case 254: {\n            gif.comments.push([getFrameIndex(false), byteStream.readSubBlocks()]);\n            break;\n        }\n        case 1: {\n            if (gif.globalColorTable.length === 0) {\n                throw new EvalError(\"plain text extension without global color table\");\n            }\n            byteStream.pos++;\n            gif.frames[getFrameIndex(false)].plainTextData = {\n                left: byteStream.nextTwoBytes(),\n                top: byteStream.nextTwoBytes(),\n                width: byteStream.nextTwoBytes(),\n                height: byteStream.nextTwoBytes(),\n                charSize: {\n                    width: byteStream.nextTwoBytes(),\n                    height: byteStream.nextTwoBytes(),\n                },\n                foregroundColor: byteStream.nextByte(),\n                backgroundColor: byteStream.nextByte(),\n                text: byteStream.readSubBlocks(),\n            };\n            break;\n        }\n        default:\n            byteStream.skipSubBlocks();\n            break;\n    }\n}\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    const frame = gif.frames[getFrameIndex(true)];\n    frame.left = byteStream.nextTwoBytes();\n    frame.top = byteStream.nextTwoBytes();\n    frame.width = byteStream.nextTwoBytes();\n    frame.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\n    frame.reserved = (packedByte & 0x18) >>> 3;\n    const localColorCount = 1 << ((packedByte & 7) + 1);\n    if (localColorTableFlag) {\n        frame.localColorTable = parseColorTable(byteStream, localColorCount);\n    }\n    const getColor = (index) => {\n        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n        return { r, g, b, a: index === getTransparencyIndex(null) ? (avgAlpha ? ~~((r + g + b) / 3) : 0) : 255 };\n    };\n    const image = (() => {\n        try {\n            return new ImageData(frame.width, frame.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (image == null) {\n        throw new EvalError(\"GIF frame size is to large\");\n    }\n    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;\n    const readBits = (pos, len) => {\n        const bytePos = pos >>> 3, bitPos = pos & 7;\n        return (((imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16)) &\n            (((1 << len) - 1) << bitPos)) >>>\n            bitPos);\n    };\n    if (interlacedFlag) {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pass = 0; pass < 4; pass++) {\n            if (InterlaceOffsets[pass] < frame.height) {\n                for (let pixelPos = 0, lineIndex = 0;;) {\n                    const last = code;\n                    code = readBits(pos, size);\n                    pos += size + 1;\n                    if (code === clearCode) {\n                        size = minCodeSize + 1;\n                        dic.length = clearCode + 2;\n                        for (let i = 0; i < dic.length; i++) {\n                            dic[i] = i < clearCode ? [i] : [];\n                        }\n                    }\n                    else {\n                        if (code >= dic.length) {\n                            dic.push(dic[last].concat(dic[last][0]));\n                        }\n                        else if (last !== clearCode) {\n                            dic.push(dic[last].concat(dic[code][0]));\n                        }\n                        for (let i = 0; i < dic[code].length; i++) {\n                            const { r, g, b, a } = getColor(dic[code][i]);\n                            image.data.set([r, g, b, a], InterlaceOffsets[pass] * frame.width +\n                                InterlaceSteps[pass] * lineIndex +\n                                (pixelPos % (frame.width * 4)));\n                            pixelPos += 4;\n                        }\n                        if (dic.length === 1 << size && size < 0xc) {\n                            size++;\n                        }\n                    }\n                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n                        lineIndex++;\n                        if (InterlaceOffsets[pass] + InterlaceSteps[pass] * lineIndex >= frame.height) {\n                            break;\n                        }\n                    }\n                }\n            }\n            progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n    }\n    else {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pixelPos = -4;;) {\n            const last = code;\n            code = readBits(pos, size);\n            pos += size;\n            if (code === clearCode) {\n                size = minCodeSize + 1;\n                dic.length = clearCode + 2;\n                for (let i = 0; i < dic.length; i++) {\n                    dic[i] = i < clearCode ? [i] : [];\n                }\n            }\n            else {\n                if (code === clearCode + 1) {\n                    break;\n                }\n                if (code >= dic.length) {\n                    dic.push(dic[last].concat(dic[last][0]));\n                }\n                else if (last !== clearCode) {\n                    dic.push(dic[last].concat(dic[code][0]));\n                }\n                for (let i = 0; i < dic[code].length; i++) {\n                    const { r, g, b, a } = getColor(dic[code][i]);\n                    image.data.set([r, g, b, a], (pixelPos += 4));\n                }\n                if (dic.length >= 1 << size && size < 0xc) {\n                    size++;\n                }\n            }\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n        progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n    }\n}\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    switch (byteStream.nextByte()) {\n        case 59:\n            return true;\n        case 44:\n            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n            break;\n        case 33:\n            await parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n            break;\n        default:\n            throw new EvalError(\"undefined block found\");\n    }\n    return false;\n}\nexport function getGIFLoopAmount(gif) {\n    for (const extension of gif.applicationExtensions) {\n        if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\n            continue;\n        }\n        return extension.data[1] + (extension.data[2] << 8);\n    }\n    return NaN;\n}\nexport async function decodeGIF(gifURL, progressCallback, avgAlpha) {\n    if (!avgAlpha)\n        avgAlpha = false;\n    const res = await fetch(gifURL);\n    if (!res.ok && res.status === 404) {\n        throw new EvalError(\"file not found\");\n    }\n    const buffer = await res.arrayBuffer();\n    const gif = {\n        width: 0,\n        height: 0,\n        totalTime: 0,\n        colorRes: 0,\n        pixelAspectRatio: 0,\n        frames: [],\n        sortFlag: false,\n        globalColorTable: [],\n        backgroundImage: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n        comments: [],\n        applicationExtensions: [],\n    }, byteStream = new ByteStream(new Uint8ClampedArray(buffer));\n    if (byteStream.getString(6) !== \"GIF89a\") {\n        throw new Error(\"not a supported GIF file\");\n    }\n    gif.width = byteStream.nextTwoBytes();\n    gif.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;\n    gif.colorRes = (packedByte & 0x70) >>> 4;\n    gif.sortFlag = (packedByte & 8) === 8;\n    const globalColorCount = 1 << ((packedByte & 7) + 1), backgroundColorIndex = byteStream.nextByte();\n    gif.pixelAspectRatio = byteStream.nextByte();\n    if (gif.pixelAspectRatio !== 0) {\n        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n    }\n    if (globalColorTableFlag) {\n        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n    }\n    const backgroundImage = (() => {\n        try {\n            return new ImageData(gif.width, gif.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (backgroundImage == null) {\n        throw new Error(\"GIF frame size is to large\");\n    }\n    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];\n    backgroundImage.data.set(globalColorTableFlag ? [r, g, b, 255] : [0, 0, 0, 0]);\n    for (let i = 4; i < backgroundImage.data.length; i *= 2) {\n        backgroundImage.data.copyWithin(i, 0, i);\n    }\n    gif.backgroundImage = backgroundImage;\n    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;\n    const getframeIndex = (increment) => {\n        if (increment) {\n            incrementFrameIndex = true;\n        }\n        return frameIndex;\n    };\n    const getTransparencyIndex = (newValue) => {\n        if (newValue != null) {\n            transparencyIndex = newValue;\n        }\n        return transparencyIndex;\n    };\n    try {\n        do {\n            if (incrementFrameIndex) {\n                gif.frames.push({\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                    disposalMethod: 0,\n                    image: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n                    plainTextData: null,\n                    userInputDelayFlag: false,\n                    delayTime: 0,\n                    sortFlag: false,\n                    localColorTable: [],\n                    reserved: 0,\n                    GCreserved: 0,\n                });\n                frameIndex++;\n                transparencyIndex = -1;\n                incrementFrameIndex = false;\n            }\n        } while (!(await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback)));\n        gif.frames.length--;\n        for (const frame of gif.frames) {\n            if (frame.userInputDelayFlag && frame.delayTime === 0) {\n                gif.totalTime = Infinity;\n                break;\n            }\n            gif.totalTime += frame.delayTime;\n        }\n        return gif;\n    }\n    catch (error) {\n        if (error instanceof EvalError) {\n            throw new Error(`error while parsing frame ${frameIndex} \"${error.message}\"`);\n        }\n        throw error;\n    }\n}\n","import { errorPrefix, getLogger, getStyleFromHsl } from \"tsparticles-engine\";\nimport { decodeGIF, getGIFLoopAmount } from \"./GifUtils/Utils\";\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = getStyleFromHsl(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport async function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", () => {\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", () => {\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            getLogger().error(`${errorPrefix} loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nexport async function loadGifImage(image) {\n    if (image.type !== \"gif\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    try {\n        image.gifData = await decodeGIF(image.source);\n        image.gifLoopCount = getGIFLoopAmount(image.gifData) ?? 0;\n        if (image.gifLoopCount === 0) {\n            image.gifLoopCount = Infinity;\n        }\n    }\n    catch {\n        image.error = true;\n    }\n    image.loading = false;\n}\nexport async function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        getLogger().error(`${errorPrefix} Image not found`);\n        image.error = true;\n    }\n    else {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n    const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? 1), imageRes = {\n        color,\n        gif: imageData.gif,\n        data: {\n            ...image,\n            svgData: svgColoredData,\n        },\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: imageData.replaceColor ?? imageData.replace_color,\n        source: imageData.src,\n    };\n    return new Promise((resolve) => {\n        const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", () => {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", async () => {\n            domUrl.revokeObjectURL(url);\n            const img2 = {\n                ...image,\n                error: false,\n                loading: true,\n            };\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        });\n        img.src = url;\n    });\n}\n","import { errorPrefix } from \"tsparticles-engine\";\nimport { replaceImageColor } from \"./Utils\";\nexport class ImageDrawer {\n    constructor(engine) {\n        this.loadImageShape = async (imageShape) => {\n            if (!this._engine.loadImage) {\n                throw new Error(`${errorPrefix} image shape not initialized`);\n            }\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: imageShape.replaceColor ?? imageShape.replace_color ?? false,\n                src: imageShape.src,\n            });\n        };\n        this._engine = engine;\n    }\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    draw(context, particle, radius, opacity, delta) {\n        const image = particle.image, element = image?.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext(\"2d\");\n            if (!offscreenContext) {\n                throw new Error(\"could not create offscreen canvas context\");\n            }\n            offscreenContext.imageSmoothingQuality = \"low\";\n            offscreenContext.imageSmoothingEnabled = false;\n            offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n            if (particle.gifLoopCount === undefined) {\n                particle.gifLoopCount = image.gifLoopCount ?? 0;\n            }\n            let frameIndex = particle.gifFrame ?? 0;\n            const pos = { x: -image.gifData.width * 0.5, y: -image.gifData.height * 0.5 }, frame = image.gifData.frames[frameIndex];\n            if (particle.gifTime === undefined) {\n                particle.gifTime = 0;\n            }\n            if (!frame.bitmap) {\n                return;\n            }\n            context.scale(radius / image.gifData.width, radius / image.gifData.height);\n            switch (frame.disposalMethod) {\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 0:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    break;\n                case 1:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    break;\n                case 2:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    if (image.gifData.globalColorTable.length === 0) {\n                        offscreenContext.putImageData(image.gifData.frames[0].image, pos.x + frame.left, pos.y + frame.top);\n                    }\n                    else {\n                        offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n                    }\n                    break;\n                case 3:\n                    {\n                        const previousImageData = offscreenContext.getImageData(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                        context.drawImage(offscreenCanvas, pos.x, pos.y);\n                        offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.putImageData(previousImageData, 0, 0);\n                    }\n                    break;\n            }\n            particle.gifTime += delta.value;\n            if (particle.gifTime > frame.delayTime) {\n                particle.gifTime -= frame.delayTime;\n                if (++frameIndex >= image.gifData.frames.length) {\n                    if (--particle.gifLoopCount <= 0) {\n                        return;\n                    }\n                    frameIndex = 0;\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                }\n                particle.gifFrame = frameIndex;\n            }\n            context.scale(image.gifData.width / radius, image.gifData.height / radius);\n        }\n        else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius,\n            };\n            context.drawImage(element, pos.x, pos.y, radius * 2, (radius * 2) / ratio);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload) {\n            await this._engine.loadImage(imageData);\n        }\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData, image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            this.loadImageShape(imageData).then(() => {\n                this.loadShape(particle);\n            });\n        }\n    }\n    particleInit(container, particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData, color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        const replaceColor = imageData.replaceColor ?? imageData.replace_color ?? image.replaceColor;\n        if (image.loading) {\n            setTimeout(() => {\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        (async () => {\n            let imageRes;\n            if (image.svgData && color) {\n                imageRes = await replaceImageColor(image, imageData, color, particle);\n            }\n            else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    gif: image.gif,\n                    gifData: image.gifData,\n                    gifLoopCount: image.gifLoopCount,\n                    loaded: true,\n                    ratio: imageData.width && imageData.height ? imageData.width / imageData.height : image.ratio ?? 1,\n                    replaceColor: replaceColor,\n                    source: imageData.src,\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = imageData.fill ?? particle.fill, close = imageData.close ?? particle.close, imageShape = {\n                image: imageRes,\n                fill,\n                close,\n            };\n            particle.image = imageShape.image;\n            particle.fill = imageShape.fill;\n            particle.close = imageShape.close;\n        })();\n    }\n}\n","export class Preload {\n    constructor() {\n        this.src = \"\";\n        this.gif = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.gif !== undefined) {\n            this.gif = data.gif;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.name !== undefined) {\n            this.name = data.name;\n        }\n        if (data.replaceColor !== undefined) {\n            this.replaceColor = data.replaceColor;\n        }\n        if (data.src !== undefined) {\n            this.src = data.src;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n","import { Preload } from \"./Options/Classes/Preload\";\nexport class ImagePreloaderPlugin {\n    constructor(engine) {\n        this.id = \"imagePreloader\";\n        this._engine = engine;\n    }\n    getPlugin() {\n        return {};\n    }\n    loadOptions(options, source) {\n        if (!source || !source.preload) {\n            return;\n        }\n        if (!options.preload) {\n            options.preload = [];\n        }\n        const preloadOptions = options.preload;\n        for (const item of source.preload) {\n            const existing = preloadOptions.find((t) => t.name === item.name || t.src === item.src);\n            if (existing) {\n                existing.load(item);\n            }\n            else {\n                const preload = new Preload();\n                preload.load(item);\n                preloadOptions.push(preload);\n            }\n        }\n    }\n    needsPlugin() {\n        return true;\n    }\n}\n","import { downloadSvgImage, loadGifImage, loadImage } from \"./Utils\";\nimport { ImageDrawer } from \"./ImageDrawer\";\nimport { ImagePreloaderPlugin } from \"./ImagePreloader\";\nimport { errorPrefix } from \"tsparticles-engine\";\nfunction addLoadImageToEngine(engine) {\n    if (engine.loadImage) {\n        return;\n    }\n    engine.loadImage = async (data) => {\n        if (!data.name && !data.src) {\n            throw new Error(`${errorPrefix} no image source provided`);\n        }\n        if (!engine.images) {\n            engine.images = [];\n        }\n        if (engine.images.find((t) => t.name === data.name || t.source === data.src)) {\n            return;\n        }\n        try {\n            const image = {\n                gif: data.gif ?? false,\n                name: data.name ?? data.src,\n                source: data.src,\n                type: data.src.substring(data.src.length - 3),\n                error: false,\n                loading: true,\n                replaceColor: data.replaceColor,\n                ratio: data.width && data.height ? data.width / data.height : undefined,\n            };\n            engine.images.push(image);\n            const imageFunc = data.gif ? loadGifImage : data.replaceColor ? downloadSvgImage : loadImage;\n            await imageFunc(image);\n        }\n        catch {\n            throw new Error(`${errorPrefix} ${data.name ?? data.src} not found`);\n        }\n    };\n}\nexport async function loadImageShape(engine, refresh = true) {\n    addLoadImageToEngine(engine);\n    const preloader = new ImagePreloaderPlugin(engine);\n    await engine.addPlugin(preloader, refresh);\n    await engine.addShape([\"image\", \"images\"], new ImageDrawer(engine), refresh);\n}\n","import { ValueWithRandom } from \"tsparticles-engine\";\nexport class LifeDelay extends ValueWithRandom {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n","import { ValueWithRandom } from \"tsparticles-engine\";\nexport class LifeDuration extends ValueWithRandom {\n    constructor() {\n        super();\n        this.random.minimumValue = 0.0001;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n","import { LifeDelay } from \"./LifeDelay\";\nimport { LifeDuration } from \"./LifeDuration\";\nexport class Life {\n    constructor() {\n        this.count = 0;\n        this.delay = new LifeDelay();\n        this.duration = new LifeDuration();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.delay.load(data.delay);\n        this.duration.load(data.duration);\n    }\n}\n","import { getRandom, getRangeValue, randomInRange, setRangeValue, } from \"tsparticles-engine\";\nimport { Life } from \"./Options/Classes/Life\";\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : getRandom())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= 0) {\n            particle.life.duration = -1;\n        }\n        if (particle.life.count <= 0) {\n            particle.life.count = -1;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > 0;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.life) {\n            options.life = new Life();\n        }\n        for (const source of sources) {\n            options.life.load(source?.life);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        const life = particle.life;\n        let justSpawned = false;\n        if (particle.spawning) {\n            life.delayTime += delta.value;\n            if (life.delayTime >= particle.life.delay) {\n                justSpawned = true;\n                particle.spawning = false;\n                life.delayTime = 0;\n                life.time = 0;\n            }\n            else {\n                return;\n            }\n        }\n        if (life.duration === -1) {\n            return;\n        }\n        if (particle.spawning) {\n            return;\n        }\n        if (justSpawned) {\n            life.time = 0;\n        }\n        else {\n            life.time += delta.value;\n        }\n        if (life.time < life.duration) {\n            return;\n        }\n        life.time = 0;\n        if (particle.life.count > 0) {\n            particle.life.count--;\n        }\n        if (particle.life.count === 0) {\n            particle.destroy();\n            return;\n        }\n        const canvasSize = this.container.canvas.size, widthRange = setRangeValue(0, canvasSize.width), heightRange = setRangeValue(0, canvasSize.width);\n        particle.position.x = randomInRange(widthRange);\n        particle.position.y = randomInRange(heightRange);\n        particle.spawning = true;\n        life.delayTime = 0;\n        life.time = 0;\n        particle.reset();\n        const lifeOptions = particle.options.life;\n        if (lifeOptions) {\n            life.delay = getRangeValue(lifeOptions.delay.value) * 1000;\n            life.duration = getRangeValue(lifeOptions.duration.value) * 1000;\n        }\n    }\n}\n","import { LifeUpdater } from \"./LifeUpdater\";\nexport async function loadLifeUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"life\", (container) => new LifeUpdater(container), refresh);\n}\n","export class LineDrawer {\n    draw(context, particle, radius) {\n        const shapeData = particle.shapeData;\n        context.moveTo(-radius / 2, 0);\n        context.lineTo(radius / 2, 0);\n        context.lineCap = shapeData?.cap ?? \"butt\";\n    }\n    getSidesCount() {\n        return 1;\n    }\n}\n","import { LineDrawer } from \"./LineDrawer\";\nexport async function loadLineShape(engine, refresh = true) {\n    await engine.addShape(\"line\", new LineDrawer(), refresh);\n}\n","import { isSsr } from \"tsparticles-engine\";\nexport class ParallaxMover {\n    init() {\n    }\n    isEnabled(particle) {\n        return (!isSsr() &&\n            !particle.destroyed &&\n            particle.container.actualOptions.interactivity.events.onHover.parallax.enable);\n    }\n    move(particle) {\n        const container = particle.container, options = container.actualOptions, parallaxOptions = options.interactivity.events.onHover.parallax;\n        if (isSsr() || !parallaxOptions.enable) {\n            return;\n        }\n        const parallaxForce = parallaxOptions.force, mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasSize = container.canvas.size, canvasCenter = {\n            x: canvasSize.width / 2,\n            y: canvasSize.height / 2,\n        }, parallaxSmooth = parallaxOptions.smooth, factor = particle.getRadius() / parallaxForce, centerDistance = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        }, { offset } = particle;\n        offset.x += (centerDistance.x - offset.x) / parallaxSmooth;\n        offset.y += (centerDistance.y - offset.y) / parallaxSmooth;\n    }\n}\n","import { ParallaxMover } from \"./ParallaxMover\";\nexport async function loadParallaxMover(engine, refresh = true) {\n    await engine.addMover(\"parallax\", () => new ParallaxMover(), refresh);\n}\n","import { ParticlesInteractorBase, getDistances, } from \"tsparticles-engine\";\nexport class Attractor extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact(p1) {\n        const container = this.container, distance = p1.retina.attractDistance ?? container.retina.attractDistance, pos1 = p1.getPosition(), query = container.particles.quadTree.queryCircle(pos1, distance);\n        for (const p2 of query) {\n            if (p1 === p2 || !p2.options.move.attract.enable || p2.destroyed || p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), { dx, dy } = getDistances(pos1, pos2), rotate = p1.options.move.attract.rotate, ax = dx / (rotate.x * 1000), ay = dy / (rotate.y * 1000), p1Factor = p2.size.value / p1.size.value, p2Factor = 1 / p1Factor;\n            p1.velocity.x -= ax * p1Factor;\n            p1.velocity.y -= ay * p1Factor;\n            p2.velocity.x += ax * p2Factor;\n            p2.velocity.y += ay * p2Factor;\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.move.attract.enable;\n    }\n    reset() {\n    }\n}\n","import { Attractor } from \"./Attractor\";\nexport async function loadParticlesAttractInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"particlesAttract\", (container) => new Attractor(container), refresh);\n}\n","import { clamp } from \"tsparticles-engine\";\nfunction updateAbsorb(p1, r1, p2, r2, delta, pixelRatio) {\n    const factor = clamp((p1.options.collisions.absorb.speed * delta.factor) / 10, 0, r2);\n    p1.size.value += factor / 2;\n    p2.size.value -= factor;\n    if (r2 <= pixelRatio) {\n        p2.size.value = 0;\n        p2.destroy();\n    }\n}\nexport function absorb(p1, p2, delta, pixelRatio) {\n    const r1 = p1.getRadius(), r2 = p2.getRadius();\n    if (r1 === undefined && r2 !== undefined) {\n        p1.destroy();\n    }\n    else if (r1 !== undefined && r2 === undefined) {\n        p2.destroy();\n    }\n    else if (r1 !== undefined && r2 !== undefined) {\n        if (r1 >= r2) {\n            updateAbsorb(p1, r1, p2, r2, delta, pixelRatio);\n        }\n        else {\n            updateAbsorb(p2, r2, p1, r1, delta, pixelRatio);\n        }\n    }\n}\n","import { circleBounce, circleBounceDataFromParticle, getRangeValue } from \"tsparticles-engine\";\nconst fixBounceSpeed = (p) => {\n    if (p.collisionMaxSpeed === undefined) {\n        p.collisionMaxSpeed = getRangeValue(p.options.collisions.maxSpeed);\n    }\n    if (p.velocity.length > p.collisionMaxSpeed) {\n        p.velocity.length = p.collisionMaxSpeed;\n    }\n};\nexport function bounce(p1, p2) {\n    circleBounce(circleBounceDataFromParticle(p1), circleBounceDataFromParticle(p2));\n    fixBounceSpeed(p1);\n    fixBounceSpeed(p2);\n}\n","import { bounce } from \"./Bounce\";\nexport function destroy(p1, p2) {\n    if (!p1.unbreakable && !p2.unbreakable) {\n        bounce(p1, p2);\n    }\n    if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n        p1.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n        p2.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n        const deleteP = p1.getRadius() >= p2.getRadius() ? p2 : p1;\n        deleteP.destroy();\n    }\n}\n","import { absorb } from \"./Absorb\";\nimport { bounce } from \"./Bounce\";\nimport { destroy } from \"./Destroy\";\nexport function resolveCollision(p1, p2, delta, pixelRatio) {\n    switch (p1.options.collisions.mode) {\n        case \"absorb\": {\n            absorb(p1, p2, delta, pixelRatio);\n            break;\n        }\n        case \"bounce\": {\n            bounce(p1, p2);\n            break;\n        }\n        case \"destroy\": {\n            destroy(p1, p2);\n            break;\n        }\n    }\n}\n","import { ParticlesInteractorBase, getDistance } from \"tsparticles-engine\";\nimport { resolveCollision } from \"./ResolveCollision\";\nexport class Collider extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    async interact(p1, delta) {\n        if (p1.destroyed || p1.spawning) {\n            return;\n        }\n        const container = this.container, pos1 = p1.getPosition(), radius1 = p1.getRadius(), query = container.particles.quadTree.queryCircle(pos1, radius1 * 2);\n        for (const p2 of query) {\n            if (p1 === p2 ||\n                !p2.options.collisions.enable ||\n                p1.options.collisions.mode !== p2.options.collisions.mode ||\n                p2.destroyed ||\n                p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), radius2 = p2.getRadius();\n            if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {\n                continue;\n            }\n            const dist = getDistance(pos1, pos2), distP = radius1 + radius2;\n            if (dist > distP) {\n                continue;\n            }\n            resolveCollision(p1, p2, delta, container.retina.pixelRatio);\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.collisions.enable;\n    }\n    reset() {\n    }\n}\n","import { Collider } from \"./Collider\";\nexport async function loadParticlesCollisionsInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"particlesCollisions\", (container) => new Collider(container), refresh);\n}\n","import { Circle, Rectangle } from \"tsparticles-engine\";\nexport class CircleWarp extends Circle {\n    constructor(x, y, radius, canvasSize) {\n        super(x, y, radius);\n        this.canvasSize = canvasSize;\n        this.canvasSize = { ...canvasSize };\n    }\n    contains(point) {\n        const { width, height } = this.canvasSize;\n        const { x, y } = point;\n        return (super.contains(point) ||\n            super.contains({ x: x - width, y }) ||\n            super.contains({ x: x - width, y: y - height }) ||\n            super.contains({ x, y: y - height }));\n    }\n    intersects(range) {\n        if (super.intersects(range)) {\n            return true;\n        }\n        const rect = range, circle = range, newPos = {\n            x: range.position.x - this.canvasSize.width,\n            y: range.position.y - this.canvasSize.height,\n        };\n        if (circle.radius !== undefined) {\n            const biggerCircle = new Circle(newPos.x, newPos.y, circle.radius * 2);\n            return super.intersects(biggerCircle);\n        }\n        else if (rect.size !== undefined) {\n            const rectSW = new Rectangle(newPos.x, newPos.y, rect.size.width * 2, rect.size.height * 2);\n            return super.intersects(rectSW);\n        }\n        return false;\n    }\n}\n","import { OptionsColor } from \"tsparticles-engine\";\nexport class LinksShadow {\n    constructor() {\n        this.blur = 5;\n        this.color = new OptionsColor();\n        this.color.value = \"#000\";\n        this.enable = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.blur !== undefined) {\n            this.blur = data.blur;\n        }\n        this.color = OptionsColor.create(this.color, data.color);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n","import { OptionsColor } from \"tsparticles-engine\";\nexport class LinksTriangle {\n    constructor() {\n        this.enable = false;\n        this.frequency = 1;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n","import { OptionsColor } from \"tsparticles-engine\";\nimport { LinksShadow } from \"./LinksShadow\";\nimport { LinksTriangle } from \"./LinksTriangle\";\nexport class Links {\n    constructor() {\n        this.blink = false;\n        this.color = new OptionsColor();\n        this.color.value = \"#fff\";\n        this.consent = false;\n        this.distance = 100;\n        this.enable = false;\n        this.frequency = 1;\n        this.opacity = 1;\n        this.shadow = new LinksShadow();\n        this.triangles = new LinksTriangle();\n        this.width = 1;\n        this.warp = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.id !== undefined) {\n            this.id = data.id;\n        }\n        if (data.blink !== undefined) {\n            this.blink = data.blink;\n        }\n        this.color = OptionsColor.create(this.color, data.color);\n        if (data.consent !== undefined) {\n            this.consent = data.consent;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        this.shadow.load(data.shadow);\n        this.triangles.load(data.triangles);\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n        if (data.warp !== undefined) {\n            this.warp = data.warp;\n        }\n    }\n}\n","import { Circle, ParticlesInteractorBase, getDistances, getLinkRandomColor, } from \"tsparticles-engine\";\nimport { CircleWarp } from \"./CircleWarp\";\nimport { Links } from \"./Options/Classes/Links\";\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n    const { dx, dy, distance } = getDistances(pos1, pos2);\n    if (!warp || distance <= optDistance) {\n        return distance;\n    }\n    const absDiffs = {\n        x: Math.abs(dx),\n        y: Math.abs(dy),\n    }, warpDistances = {\n        x: Math.min(absDiffs.x, canvasSize.width - absDiffs.x),\n        y: Math.min(absDiffs.y, canvasSize.height - absDiffs.y),\n    };\n    return Math.sqrt(warpDistances.x ** 2 + warpDistances.y ** 2);\n}\nexport class Linker extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n        this._setColor = (p1) => {\n            if (!p1.options.links) {\n                return;\n            }\n            const container = this.linkContainer, linksOptions = p1.options.links;\n            let linkColor = linksOptions.id === undefined\n                ? container.particles.linksColor\n                : container.particles.linksColors.get(linksOptions.id);\n            if (linkColor) {\n                return;\n            }\n            const optColor = linksOptions.color;\n            linkColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            if (linksOptions.id === undefined) {\n                container.particles.linksColor = linkColor;\n            }\n            else {\n                container.particles.linksColors.set(linksOptions.id, linkColor);\n            }\n        };\n        this.linkContainer = container;\n    }\n    clear() {\n    }\n    init() {\n        this.linkContainer.particles.linksColor = undefined;\n        this.linkContainer.particles.linksColors = new Map();\n    }\n    async interact(p1) {\n        if (!p1.options.links) {\n            return;\n        }\n        p1.links = [];\n        const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;\n        if (pos1.x < 0 || pos1.y < 0 || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n            return;\n        }\n        const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = p1.retina.linksDistance ?? 0, warp = linkOpt1.warp, range = warp\n            ? new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize)\n            : new Circle(pos1.x, pos1.y, optDistance), query = container.particles.quadTree.query(range);\n        for (const p2 of query) {\n            const linkOpt2 = p2.options.links;\n            if (p1 === p2 ||\n                !linkOpt2?.enable ||\n                linkOpt1.id !== linkOpt2.id ||\n                p2.spawning ||\n                p2.destroyed ||\n                !p2.links ||\n                p1.links.some((t) => t.destination === p2) ||\n                p2.links.some((t) => t.destination === p1)) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (pos2.x < 0 || pos2.y < 0 || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n                continue;\n            }\n            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n            if (distance > optDistance) {\n                continue;\n            }\n            const opacityLine = (1 - distance / optDistance) * optOpacity;\n            this._setColor(p1);\n            p1.links.push({\n                destination: p2,\n                opacity: opacityLine,\n            });\n        }\n    }\n    isEnabled(particle) {\n        return !!particle.options.links?.enable;\n    }\n    loadParticlesOptions(options, ...sources) {\n        if (!options.links) {\n            options.links = new Links();\n        }\n        for (const source of sources) {\n            options.links.load(source?.links ?? source?.lineLinked ?? source?.line_linked);\n        }\n    }\n    reset() {\n    }\n}\n","import { Linker } from \"./Linker\";\nexport async function loadLinksInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"particlesLinks\", (container) => new Linker(container), refresh);\n}\n","import { drawLine, drawTriangle, getDistance, getDistances, getRandom, getStyleFromRgb, rangeColorToRgb, } from \"tsparticles-engine\";\nexport function drawLinkLine(params) {\n    let drawn = false;\n    const { begin, end, maxDistance, context, canvasSize, width, backgroundMask, colorLine, opacity, links } = params;\n    if (getDistance(begin, end) <= maxDistance) {\n        drawLine(context, begin, end);\n        drawn = true;\n    }\n    else if (links.warp) {\n        let pi1;\n        let pi2;\n        const endNE = {\n            x: end.x - canvasSize.width,\n            y: end.y,\n        };\n        const d1 = getDistances(begin, endNE);\n        if (d1.distance <= maxDistance) {\n            const yi = begin.y - (d1.dy / d1.dx) * begin.x;\n            pi1 = { x: 0, y: yi };\n            pi2 = { x: canvasSize.width, y: yi };\n        }\n        else {\n            const endSW = {\n                x: end.x,\n                y: end.y - canvasSize.height,\n            };\n            const d2 = getDistances(begin, endSW);\n            if (d2.distance <= maxDistance) {\n                const yi = begin.y - (d2.dy / d2.dx) * begin.x;\n                const xi = -yi / (d2.dy / d2.dx);\n                pi1 = { x: xi, y: 0 };\n                pi2 = { x: xi, y: canvasSize.height };\n            }\n            else {\n                const endSE = {\n                    x: end.x - canvasSize.width,\n                    y: end.y - canvasSize.height,\n                };\n                const d3 = getDistances(begin, endSE);\n                if (d3.distance <= maxDistance) {\n                    const yi = begin.y - (d3.dy / d3.dx) * begin.x;\n                    const xi = -yi / (d3.dy / d3.dx);\n                    pi1 = { x: xi, y: yi };\n                    pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };\n                }\n            }\n        }\n        if (pi1 && pi2) {\n            drawLine(context, begin, pi1);\n            drawLine(context, end, pi2);\n            drawn = true;\n        }\n    }\n    if (!drawn) {\n        return;\n    }\n    context.lineWidth = width;\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    const { shadow } = links;\n    if (shadow.enable) {\n        const shadowColor = rangeColorToRgb(shadow.color);\n        if (shadowColor) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = getStyleFromRgb(shadowColor);\n        }\n    }\n    context.stroke();\n}\nexport function drawLinkTriangle(params) {\n    const { context, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle } = params;\n    drawTriangle(context, pos1, pos2, pos3);\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\n    context.fill();\n}\nexport function getLinkKey(ids) {\n    ids.sort((a, b) => a - b);\n    return ids.join(\"_\");\n}\nexport function setLinkFrequency(particles, dictionary) {\n    const key = getLinkKey(particles.map((t) => t.id));\n    let res = dictionary.get(key);\n    if (res === undefined) {\n        res = getRandom();\n        dictionary.set(key, res);\n    }\n    return res;\n}\n","import { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb, } from \"tsparticles-engine\";\nimport { drawLinkLine, drawLinkTriangle, setLinkFrequency } from \"./Utils\";\nexport class LinkInstance {\n    constructor(container) {\n        this.container = container;\n        this._drawLinkLine = (p1, link) => {\n            const p1LinksOptions = p1.options.links;\n            if (!p1LinksOptions?.enable) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n            let opacity = link.opacity;\n            container.canvas.draw((ctx) => {\n                let colorLine;\n                const twinkle = p1.options.twinkle?.lines;\n                if (twinkle?.enable) {\n                    const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(twinkle.color), twinkling = getRandom() < twinkleFreq;\n                    if (twinkling && twinkleRgb) {\n                        colorLine = twinkleRgb;\n                        opacity = getRangeValue(twinkle.opacity);\n                    }\n                }\n                if (!colorLine) {\n                    const linkColor = p1LinksOptions.id !== undefined\n                        ? container.particles.linksColors.get(p1LinksOptions.id)\n                        : container.particles.linksColor;\n                    colorLine = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorLine) {\n                    return;\n                }\n                const width = p1.retina.linksWidth ?? 0, maxDistance = p1.retina.linksDistance ?? 0, { backgroundMask } = options;\n                drawLinkLine({\n                    context: ctx,\n                    width,\n                    begin: pos1,\n                    end: pos2,\n                    maxDistance,\n                    canvasSize: container.canvas.size,\n                    links: p1LinksOptions,\n                    backgroundMask: backgroundMask,\n                    colorLine,\n                    opacity,\n                });\n            });\n        };\n        this._drawLinkTriangle = (p1, link1, link2) => {\n            const linksOptions = p1.options.links;\n            if (!linksOptions?.enable) {\n                return;\n            }\n            const triangleOptions = linksOptions.triangles;\n            if (!triangleOptions.enable) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, opacityTriangle = triangleOptions.opacity ?? (link1.opacity + link2.opacity) / 2;\n            if (opacityTriangle <= 0) {\n                return;\n            }\n            container.canvas.draw((ctx) => {\n                const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = p1.retina.linksDistance ?? 0;\n                if (getDistance(pos1, pos2) > linksDistance ||\n                    getDistance(pos3, pos2) > linksDistance ||\n                    getDistance(pos3, pos1) > linksDistance) {\n                    return;\n                }\n                let colorTriangle = rangeColorToRgb(triangleOptions.color);\n                if (!colorTriangle) {\n                    const linkColor = linksOptions.id !== undefined\n                        ? container.particles.linksColors.get(linksOptions.id)\n                        : container.particles.linksColor;\n                    colorTriangle = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorTriangle) {\n                    return;\n                }\n                drawLinkTriangle({\n                    context: ctx,\n                    pos1,\n                    pos2,\n                    pos3,\n                    backgroundMask: options.backgroundMask,\n                    colorTriangle,\n                    opacityTriangle,\n                });\n            });\n        };\n        this._drawTriangles = (options, p1, link, p1Links) => {\n            const p2 = link.destination;\n            if (!(options.links?.triangles.enable && p2.options.links?.triangles.enable)) {\n                return;\n            }\n            const vertices = p2.links?.filter((t) => {\n                const linkFreq = this._getLinkFrequency(p2, t.destination);\n                return (p2.options.links &&\n                    linkFreq <= p2.options.links.frequency &&\n                    p1Links.findIndex((l) => l.destination === t.destination) >= 0);\n            });\n            if (!vertices?.length) {\n                return;\n            }\n            for (const vertex of vertices) {\n                const p3 = vertex.destination, triangleFreq = this._getTriangleFrequency(p1, p2, p3);\n                if (triangleFreq > options.links.triangles.frequency) {\n                    continue;\n                }\n                this._drawLinkTriangle(p1, link, vertex);\n            }\n        };\n        this._getLinkFrequency = (p1, p2) => {\n            return setLinkFrequency([p1, p2], this._freqs.links);\n        };\n        this._getTriangleFrequency = (p1, p2, p3) => {\n            return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n        };\n        this._freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n    }\n    drawParticle(context, particle) {\n        const { links, options } = particle;\n        if (!links || links.length <= 0) {\n            return;\n        }\n        const p1Links = links.filter((l) => options.links && this._getLinkFrequency(particle, l.destination) <= options.links.frequency);\n        for (const link of p1Links) {\n            this._drawTriangles(options, particle, link, p1Links);\n            if (link.opacity > 0 && (particle.retina.linksWidth ?? 0) > 0) {\n                this._drawLinkLine(particle, link);\n            }\n        }\n    }\n    async init() {\n        this._freqs.links = new Map();\n        this._freqs.triangles = new Map();\n    }\n    particleCreated(particle) {\n        particle.links = [];\n        if (!particle.options.links) {\n            return;\n        }\n        const ratio = this.container.retina.pixelRatio, { retina } = particle, { distance, width } = particle.options.links;\n        retina.linksDistance = distance * ratio;\n        retina.linksWidth = width * ratio;\n    }\n    particleDestroyed(particle) {\n        particle.links = [];\n    }\n}\n","import { LinkInstance } from \"./LinkInstance\";\nclass LinksPlugin {\n    constructor() {\n        this.id = \"links\";\n    }\n    getPlugin(container) {\n        return new LinkInstance(container);\n    }\n    loadOptions() {\n    }\n    needsPlugin() {\n        return true;\n    }\n}\nexport async function loadLinksPlugin(engine, refresh = true) {\n    const plugin = new LinksPlugin();\n    await engine.addPlugin(plugin, refresh);\n}\n","import { loadLinksInteraction } from \"./interaction\";\nimport { loadLinksPlugin } from \"./plugin\";\nexport async function loadParticlesLinksInteraction(engine, refresh = true) {\n    await loadLinksInteraction(engine, refresh);\n    await loadLinksPlugin(engine, refresh);\n}\nexport * from \"./Options/Classes/Links\";\nexport * from \"./Options/Classes/LinksShadow\";\nexport * from \"./Options/Classes/LinksTriangle\";\nexport * from \"./Options/Interfaces/ILinks\";\nexport * from \"./Options/Interfaces/ILinksShadow\";\nexport * from \"./Options/Interfaces/ILinksTriangle\";\n","import { getRangeValue } from \"tsparticles-engine\";\nexport class PolygonDrawerBase {\n    draw(context, particle, radius) {\n        const start = this.getCenter(particle, radius), side = this.getSidesData(particle, radius), sideCount = side.count.numerator * side.count.denominator, decimalSides = side.count.numerator / side.count.denominator, interiorAngleDegrees = (180 * (decimalSides - 2)) / decimalSides, interiorAngle = Math.PI - (Math.PI * interiorAngleDegrees) / 180;\n        if (!context) {\n            return;\n        }\n        context.beginPath();\n        context.translate(start.x, start.y);\n        context.moveTo(0, 0);\n        for (let i = 0; i < sideCount; i++) {\n            context.lineTo(side.length, 0);\n            context.translate(side.length, 0);\n            context.rotate(interiorAngle);\n        }\n    }\n    getSidesCount(particle) {\n        const polygon = particle.shapeData;\n        return Math.round(getRangeValue(polygon?.sides ?? polygon?.nb_sides ?? 5));\n    }\n}\n","import { PolygonDrawerBase } from \"./PolygonDrawerBase\";\nexport class PolygonDrawer extends PolygonDrawerBase {\n    getCenter(particle, radius) {\n        return {\n            x: -radius / (particle.sides / 3.5),\n            y: -radius / (2.66 / 3.5),\n        };\n    }\n    getSidesData(particle, radius) {\n        const sides = particle.sides;\n        return {\n            count: {\n                denominator: 1,\n                numerator: sides,\n            },\n            length: (radius * 2.66) / (sides / 3),\n        };\n    }\n}\n","import { PolygonDrawerBase } from \"./PolygonDrawerBase\";\nexport class TriangleDrawer extends PolygonDrawerBase {\n    getCenter(particle, radius) {\n        return {\n            x: -radius,\n            y: radius / 1.66,\n        };\n    }\n    getSidesCount() {\n        return 3;\n    }\n    getSidesData(particle, radius) {\n        return {\n            count: {\n                denominator: 2,\n                numerator: 3,\n            },\n            length: radius * 2,\n        };\n    }\n}\n","import { PolygonDrawer } from \"./PolygonDrawer\";\nimport { TriangleDrawer } from \"./TriangleDrawer\";\nexport async function loadGenericPolygonShape(engine, refresh = true) {\n    await engine.addShape(\"polygon\", new PolygonDrawer(), refresh);\n}\nexport async function loadTriangleShape(engine, refresh = true) {\n    await engine.addShape(\"triangle\", new TriangleDrawer(), refresh);\n}\nexport async function loadPolygonShape(engine, refresh = true) {\n    await loadGenericPolygonShape(engine, refresh);\n    await loadTriangleShape(engine, refresh);\n}\n","import { setRangeValue } from \"tsparticles-engine\";\nexport class RotateAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n","import { ValueWithRandom, } from \"tsparticles-engine\";\nimport { RotateAnimation } from \"./RotateAnimation\";\nexport class Rotate extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new RotateAnimation();\n        this.direction = \"clockwise\";\n        this.path = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        super.load(data);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.animation.load(data.animation);\n        if (data.path !== undefined) {\n            this.path = data.path;\n        }\n    }\n}\n","import { getRandom, getRangeValue, } from \"tsparticles-engine\";\nimport { Rotate } from \"./Options/Classes/Rotate\";\nfunction updateRotate(particle, delta) {\n    const rotate = particle.rotate, rotateOptions = particle.options.rotate;\n    if (!rotate || !rotateOptions) {\n        return;\n    }\n    const rotateAnimation = rotateOptions.animation, speed = (rotate.velocity ?? 0) * delta.factor, max = 2 * Math.PI, decay = rotate.decay ?? 1;\n    if (!rotateAnimation.enable) {\n        return;\n    }\n    switch (rotate.status) {\n        case \"increasing\":\n            rotate.value += speed;\n            if (rotate.value > max) {\n                rotate.value -= max;\n            }\n            break;\n        case \"decreasing\":\n        default:\n            rotate.value -= speed;\n            if (rotate.value < 0) {\n                rotate.value += max;\n            }\n            break;\n    }\n    if (rotate.velocity && decay !== 1) {\n        rotate.velocity *= decay;\n    }\n}\nexport class RotateUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const rotateOptions = particle.options.rotate;\n        if (!rotateOptions) {\n            return;\n        }\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: (getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        particle.pathRotation = rotateOptions.path;\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === \"random\") {\n            const index = Math.floor(getRandom() * 2);\n            rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (rotateDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.rotate.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.rotate.status = \"increasing\";\n                break;\n        }\n        const rotateAnimation = rotateOptions.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.decay = 1 - getRangeValue(rotateAnimation.decay);\n            particle.rotate.velocity =\n                (getRangeValue(rotateAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= getRandom();\n            }\n        }\n        particle.rotation = particle.rotate.value;\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate;\n        if (!rotate) {\n            return false;\n        }\n        return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.rotate) {\n            options.rotate = new Rotate();\n        }\n        for (const source of sources) {\n            options.rotate.load(source?.rotate);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateRotate(particle, delta);\n        particle.rotation = particle.rotate?.value ?? 0;\n    }\n}\n","import { RotateUpdater } from \"./RotateUpdater\";\nexport async function loadRotateUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"rotate\", (container) => new RotateUpdater(container), refresh);\n}\n","const fixFactor = Math.sqrt(2);\nexport class SquareDrawer {\n    draw(context, particle, radius) {\n        const fixedRadius = radius / fixFactor, fixedDiameter = fixedRadius * 2;\n        context.rect(-fixedRadius, -fixedRadius, fixedDiameter, fixedDiameter);\n    }\n    getSidesCount() {\n        return 4;\n    }\n}\n","import { SquareDrawer } from \"./SquareDrawer\";\nexport async function loadSquareShape(engine, refresh = true) {\n    await engine.addShape([\"edge\", \"square\"], new SquareDrawer(), refresh);\n}\n","import { getRangeValue } from \"tsparticles-engine\";\nexport class StarDrawer {\n    draw(context, particle, radius) {\n        const sides = particle.sides, inset = particle.starInset ?? 2;\n        context.moveTo(0, 0 - radius);\n        for (let i = 0; i < sides; i++) {\n            context.rotate(Math.PI / sides);\n            context.lineTo(0, 0 - radius * inset);\n            context.rotate(Math.PI / sides);\n            context.lineTo(0, 0 - radius);\n        }\n    }\n    getSidesCount(particle) {\n        const star = particle.shapeData;\n        return Math.round(getRangeValue(star?.sides ?? star?.nb_sides ?? 5));\n    }\n    particleInit(container, particle) {\n        const star = particle.shapeData, inset = getRangeValue(star?.inset ?? 2);\n        particle.starInset = inset;\n    }\n}\n","import { StarDrawer } from \"./StarDrawer\";\nexport async function loadStarShape(engine, refresh = true) {\n    await engine.addShape(\"star\", new StarDrawer(), refresh);\n}\n","import { randomInRange, } from \"tsparticles-engine\";\nfunction updateColorValue(delta, colorValue, valueAnimation, max, decrease) {\n    if (!colorValue ||\n        !valueAnimation.enable ||\n        ((colorValue.maxLoops ?? 0) > 0 && (colorValue.loops ?? 0) > (colorValue.maxLoops ?? 0))) {\n        return;\n    }\n    if (!colorValue.time) {\n        colorValue.time = 0;\n    }\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n        colorValue.time += delta.value;\n    }\n    if ((colorValue.delayTime ?? 0) > 0 && colorValue.time < (colorValue.delayTime ?? 0)) {\n        return;\n    }\n    const offset = randomInRange(valueAnimation.offset), velocity = (colorValue.velocity ?? 0) * delta.factor + offset * 3.6, decay = colorValue.decay ?? 1;\n    if (!decrease || colorValue.status === \"increasing\") {\n        colorValue.value += velocity;\n        if (colorValue.value > max) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            if (decrease) {\n                colorValue.status = \"decreasing\";\n                colorValue.value -= colorValue.value % max;\n            }\n        }\n    }\n    else {\n        colorValue.value -= velocity;\n        if (colorValue.value < 0) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            colorValue.status = \"increasing\";\n            colorValue.value += colorValue.value;\n        }\n    }\n    if (colorValue.velocity && decay !== 1) {\n        colorValue.velocity *= decay;\n    }\n    if (colorValue.value > max) {\n        colorValue.value %= max;\n    }\n}\nexport function updateStrokeColor(particle, delta) {\n    if (!particle.strokeColor || !particle.strokeAnimation) {\n        return;\n    }\n    const { h, s, l } = particle.strokeColor, { h: hAnimation, s: sAnimation, l: lAnimation } = particle.strokeAnimation;\n    if (h) {\n        updateColorValue(delta, h, hAnimation, 360, false);\n    }\n    if (s) {\n        updateColorValue(delta, s, sAnimation, 100, true);\n    }\n    if (l) {\n        updateColorValue(delta, l, lAnimation, 100, true);\n    }\n}\n","import { getHslAnimationFromHsl, getRangeValue, itemFromSingleOrMultiple, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { updateStrokeColor } from \"./Utils\";\nexport class StrokeColorUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, options = particle.options;\n        const stroke = itemFromSingleOrMultiple(options.stroke, particle.id, options.reduceDuplicates);\n        particle.strokeWidth = getRangeValue(stroke.width) * container.retina.pixelRatio;\n        particle.strokeOpacity = getRangeValue(stroke.opacity ?? 1);\n        particle.strokeAnimation = stroke.color?.animation;\n        const strokeHslColor = rangeColorToHsl(stroke.color) ?? particle.getFillColor();\n        if (strokeHslColor) {\n            particle.strokeColor = getHslAnimationFromHsl(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);\n        }\n    }\n    isEnabled(particle) {\n        const color = particle.strokeAnimation, { strokeColor } = particle;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!color &&\n            ((strokeColor?.h.value !== undefined && strokeColor.h.enable) ||\n                (strokeColor?.s.value !== undefined && strokeColor.s.enable) ||\n                (strokeColor?.l.value !== undefined && strokeColor.l.enable)));\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateStrokeColor(particle, delta);\n    }\n}\n","import { StrokeColorUpdater } from \"./StrokeColorUpdater\";\nexport async function loadStrokeColorUpdater(engine, refresh = true) {\n    await engine.addParticleUpdater(\"strokeColor\", (container) => new StrokeColorUpdater(container), refresh);\n}\n","import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont, } from \"tsparticles-engine\";\nexport const validTypes = [\"text\", \"character\", \"char\"];\nexport class TextDrawer {\n    draw(context, particle, radius, opacity) {\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        if (particle.text === undefined) {\n            particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n        }\n        const text = particle.text, style = character.style ?? \"\", weight = character.weight ?? \"400\", size = Math.round(radius) * 2, font = character.font ?? \"Verdana\", fill = particle.fill, offsetX = (text.length * radius) / 2;\n        context.font = `${style} ${weight} ${size}px \"${font}\"`;\n        const pos = {\n            x: -offsetX,\n            y: radius / 2,\n        };\n        context.globalAlpha = opacity;\n        if (fill) {\n            context.fillText(text, pos.x, pos.y);\n        }\n        else {\n            context.strokeText(text, pos.x, pos.y);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map((t) => options.particles.shape.options[t])\n                .find((t) => !!t), promises = [];\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                promises.push(loadFont(shape.font, shape.weight));\n            });\n            await Promise.all(promises);\n        }\n    }\n    particleInit(container, particle) {\n        if (!particle.shape || !validTypes.includes(particle.shape)) {\n            return;\n        }\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n}\n","import { TextDrawer, validTypes } from \"./TextDrawer\";\nexport async function loadTextShape(engine, refresh = true) {\n    await engine.addShape(validTypes, new TextDrawer(), refresh);\n}\n","import { initPjs } from \"tsparticles-particles.js\";\nimport { loadBasic } from \"tsparticles-basic\";\nimport { loadEasingQuadPlugin } from \"tsparticles-plugin-easing-quad\";\nimport { loadExternalAttractInteraction } from \"tsparticles-interaction-external-attract\";\nimport { loadExternalBounceInteraction } from \"tsparticles-interaction-external-bounce\";\nimport { loadExternalBubbleInteraction } from \"tsparticles-interaction-external-bubble\";\nimport { loadExternalConnectInteraction } from \"tsparticles-interaction-external-connect\";\nimport { loadExternalGrabInteraction } from \"tsparticles-interaction-external-grab\";\nimport { loadExternalPauseInteraction } from \"tsparticles-interaction-external-pause\";\nimport { loadExternalPushInteraction } from \"tsparticles-interaction-external-push\";\nimport { loadExternalRemoveInteraction } from \"tsparticles-interaction-external-remove\";\nimport { loadExternalRepulseInteraction } from \"tsparticles-interaction-external-repulse\";\nimport { loadExternalSlowInteraction } from \"tsparticles-interaction-external-slow\";\nimport { loadImageShape } from \"tsparticles-shape-image\";\nimport { loadLifeUpdater } from \"tsparticles-updater-life\";\nimport { loadLineShape } from \"tsparticles-shape-line\";\nimport { loadParallaxMover } from \"tsparticles-move-parallax\";\nimport { loadParticlesAttractInteraction } from \"tsparticles-interaction-particles-attract\";\nimport { loadParticlesCollisionsInteraction } from \"tsparticles-interaction-particles-collisions\";\nimport { loadParticlesLinksInteraction } from \"tsparticles-interaction-particles-links\";\nimport { loadPolygonShape } from \"tsparticles-shape-polygon\";\nimport { loadRotateUpdater } from \"tsparticles-updater-rotate\";\nimport { loadSquareShape } from \"tsparticles-shape-square\";\nimport { loadStarShape } from \"tsparticles-shape-star\";\nimport { loadStrokeColorUpdater } from \"tsparticles-updater-stroke-color\";\nimport { loadTextShape } from \"tsparticles-shape-text\";\nexport async function loadSlim(engine, refresh = true) {\n    initPjs(engine);\n    await loadParallaxMover(engine, false);\n    await loadExternalAttractInteraction(engine, false);\n    await loadExternalBounceInteraction(engine, false);\n    await loadExternalBubbleInteraction(engine, false);\n    await loadExternalConnectInteraction(engine, false);\n    await loadExternalGrabInteraction(engine, false);\n    await loadExternalPauseInteraction(engine, false);\n    await loadExternalPushInteraction(engine, false);\n    await loadExternalRemoveInteraction(engine, false);\n    await loadExternalRepulseInteraction(engine, false);\n    await loadExternalSlowInteraction(engine, false);\n    await loadParticlesAttractInteraction(engine, false);\n    await loadParticlesCollisionsInteraction(engine, false);\n    await loadParticlesLinksInteraction(engine, false);\n    await loadEasingQuadPlugin();\n    await loadImageShape(engine, false);\n    await loadLineShape(engine, false);\n    await loadPolygonShape(engine, false);\n    await loadSquareShape(engine, false);\n    await loadStarShape(engine, false);\n    await loadTextShape(engine, false);\n    await loadLifeUpdater(engine, false);\n    await loadRotateUpdater(engine, false);\n    await loadStrokeColorUpdater(engine, false);\n    await loadBasic(engine, refresh);\n}\n"],"mappings":"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"}